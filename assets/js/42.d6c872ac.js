(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{336:function(t,n,s){"use strict";s.r(n);var e=s(5),a=Object(e.a)({},(function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("blockquote",[s("p",[t._v("什么是 Nginx？")])]),t._v(" "),s("p",[t._v("Nginx (engine x) 是一款轻量级的 Web 服务器 、反向代理服务器及电子邮件（IMAP/POP3）代理服务器。")]),t._v(" "),s("blockquote",[s("p",[t._v("什么是反向代理？")])]),t._v(" "),s("p",[t._v("反向代理（Reverse Proxy）方式是指以代理服务器来接受 internet 上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给 internet 上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。")]),t._v(" "),s("center",[s("img",{staticStyle:{zoom:"50%"},attrs:{src:"/2022-2/reverse-proxy.png"}})]),t._v(" "),s("br"),t._v(" "),s("h2",{attrs:{id:"_1-nginx-安装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-nginx-安装"}},[t._v("#")]),t._v(" 1. Nginx 安装")]),t._v(" "),s("h3",{attrs:{id:"_1-1-ubuntu-apt-安装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-ubuntu-apt-安装"}},[t._v("#")]),t._v(" 1.1 ubuntu-apt 安装")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("apt-get")]),t._v(" update\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("apt-get")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" nginx\n")])])]),s("p",[t._v("常用命令：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ nginx -s stop       "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 快速关闭Nginx，可能不保存相关信息，并迅速终止web服务。")]),t._v("\n$ nginx -s quit       "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 平稳关闭Nginx，保存相关信息，有安排的结束web服务。")]),t._v("\n$ nginx -s reload     "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 因改变了Nginx相关配置，需要重新加载配置而重载。")]),t._v("\n$ nginx -s reopen     "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 重新打开日志文件。")]),t._v("\n$ nginx -c filename   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 为 Nginx 指定一个配置文件，来代替缺省的。")]),t._v("\n$ nginx -t            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 不运行，仅仅测试配置文件。nginx 将检查配置文件的语法的正确性，并尝试打开配置文件中所引用到的文件。")]),t._v("\n$ nginx -v            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 显示 nginx 的版本。")]),t._v("\n$ nginx -V            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 显示 nginx 的版本，编译器版本和配置参数。")]),t._v("\n")])])]),s("h3",{attrs:{id:"_1-2-docker-安装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-docker-安装"}},[t._v("#")]),t._v(" 1.2 Docker 安装")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run -d --name nginx --restart"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("always "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n\t-p "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),t._v(":80 -p "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("443")]),t._v(":443 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n\t-v /docker/nginx/logs:/var/log/nginx "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n    -v /docker/nginx/nginx.conf:/etc/nginx/nginx.conf "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n\t-v /docker/nginx/conf.d:/etc/nginx/conf.d "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n\t-v /docker/nginx/cert:/etc/nginx/cert "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n    -v /www:/www "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n\tnginx\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 此处映射出来的文件为：日志目录、主配置文件、子配置目录、ssl证书目录、静态文件目录")]),t._v("\n")])])]),s("p",[t._v("💡 如果使用映射文件启动 nginx docker，而映射的文件没有配置好，可能启动不成功。")]),t._v(" "),s("p",[t._v("常用命令：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 进入容器执行nginx命令")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("exec")]),t._v(" -it nginx -t\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("exec")]),t._v(" -it nginx -s reload\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 常用docker命令")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" restart nginx "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 重启docker进程")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n")])])]),s("br"),t._v(" "),s("h2",{attrs:{id:"_2-nginx-配置文件结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-nginx-配置文件结构"}},[t._v("#")]),t._v(" 2. Nginx 配置文件结构")]),t._v(" "),s("center",[s("img",{staticStyle:{zoom:"40%"},attrs:{src:"/2022-2/nginx配置文件.png"}})]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("main")]),t._v("：全局配置部分用来配置对整个 server 都有效的参数。主要会设置一些影响 nginx 服务器整体运行的配置指令，主要包括配置运行 Nginx 服务器的用户（组）、允许生成的 worker process 数，进程 PID 存放路径、日志存放路径和类型以 及配置文件的引入等。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("events")]),t._v("：events 块涉及的指令主要影响 Nginx 服务器与用户的网络连接，常用的设置包括是否开启对多 worker process 下的网络连接进行序列化，是否允许同时接收多个网络连接，选取哪种事件驱动模型来处理连接请求，每个 worker process 可以同时支持的最大连接数等。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("http")]),t._v("：http 全局块配置的指令包括文件引入、MIME-TYPE 定义、日志自定义、连接超时时间、单链接请求数上限等。")])])]),t._v(" "),s("br"),t._v(" "),s("h2",{attrs:{id:"_3-常见应用的配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-常见应用的配置"}},[t._v("#")]),t._v(" 3. 常见应用的配置")]),t._v(" "),s("blockquote",[s("p",[t._v("配置文件统一放在/etc/nginx/conf.d/xxx.conf，该目录已经被 Nginx 主配置文件（/etc/nginx/nginx.conf）的 http 模块引入。")])]),t._v(" "),s("h3",{attrs:{id:"_3-1-配置静态资源服务"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-配置静态资源服务"}},[t._v("#")]),t._v(" 3.1 配置静态资源服务")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("server {\n\tlisten 80;\n\tserver_name localhost;\n\n\tlocation / {\n\t\talias /www/blog/;  # 使用alias，则/www/blog后的文件与url一一对应\n\t    index index.html; # 默认就是index.html, 可省略\n\t\t# autoindex on    # 可以通过目录方式访问，类似文件服务器\n\t}\n}\n")])])]),s("h3",{attrs:{id:"_3-2-配置反向代理服务"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-配置反向代理服务"}},[t._v("#")]),t._v(" 3.2 配置反向代理服务")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("upstream local {\n    server localhost:8080;\n}\n\nserver {\n    listen 80;\n    server_name www.xucongcong.top; # 匹配域名（多个反向代理服务可以都使用80端口，但使用域名区分代理规则）\n\n    location / {\n\t\tproxy_set_header Host $host;\n\t\tproxy_set_header X-Real-IP $remote_addr;\n\t\tproxy_set_header X_Forward-For $proxy_add_x_forwarded_for;\n        proxy_pass http://local;\n    }\n}\n\n")])])]),s("h3",{attrs:{id:"_3-3-配置负载均衡"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-配置负载均衡"}},[t._v("#")]),t._v(" 3.3 配置负载均衡")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("upstream local {\n    server localhost:8080; # 权重weight默认相同, 详细的权重配置见文档\n    server localhost:8081;\n}\n\nserver {\n    listen 80;\n    server_name www.xucongcong.top;\n\n    location / {\n        proxy_pass http://local;\n    }\n}\n\n")])])]),s("h3",{attrs:{id:"_3-4-配置-https"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-配置-https"}},[t._v("#")]),t._v(" 3.4 配置 https")]),t._v(" "),s("blockquote",[s("p",[t._v("先下载证书到指定目录，这里放在/etc/nginx/cert 目录下")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("# 这个配置能将80端口的http请求重定向到443的https请求\nserver {\n\tlisten 80;\n\tserver_name www.xucongcong.top;\n\trewrite ^(.*)$ https://$host$1;\n}\n\nserver {\n    listen 443 ssl;\n    server_name www.xucongcong.com;\n\n    ssl_certificate cert/www.xucongcong.com.pem;\n    ssl_certificate_key cert/www.xucongcong.com.key;\n    ssl_session_timeout 5m;\n    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;\n    ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3; #表示使用的TLS协议的类型。\n    ssl_prefer_server_ciphers on;\n\n\tlocation / {\n\t\talias /www/blog/;\n\t}\n}\n\n")])])]),s("h2",{attrs:{id:"参考文档"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考文档"}},[t._v("#")]),t._v(" 参考文档")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://dunwu.github.io/nginx-tutorial/#/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Nginx 极简教程"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"http://nginx.org/en/docs/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Nginx 官方文档"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://juejin.cn/post/6844903944267759624",target:"_blank",rel:"noopener noreferrer"}},[t._v("Nginx 这一篇就够了"),s("OutboundLink")],1)])])],1)}),[],!1,null,null,null);n.default=a.exports}}]);