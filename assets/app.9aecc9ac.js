import{A as R,p as f,d as F,u as h,o as e,c as t,b as p,n as b,G as i,C as l,t as c,_ as S,y as u,J as d,E as P,a as $,F as g,R as j,S as O,U as H,D as m,j as z,Q as V,H as Q,a5 as W,a6 as X,a7 as K,a8 as ss,a9 as ns,aa as as,ab as os,ac as ls,ad as ps,ae as es,af as ts,M as rs,k as cs,q as ys,ag as is,ah as Fs,ai as Ds}from"./chunks/framework.8ca2618e.js";import{t as q}from"./chunks/theme.8b705d23.js";const _=JSON.parse('[{"title":"JavaScript 函数式编程","author":"xcc","url":"/blog/posts/JavaScript-fp.html","excerpt":"<p>函数式编程思想是一种对运算过程的抽象，这里的函数是指数学意义上映射关系（如<em>y=sin(x)</em>），也称为纯函数，而编程语言定义的函数除了运算，往往带有副作用，如 IO 操作、影响外部变量等。</p>\\n<nav class=\\"table-of-contents\\"><ul><li><a href=\\"#_1-函数式编程基础\\">1. 函数式编程基础</a><ul><li><a href=\\"#_1-1-函数是一等公民\\">1.1 函数是一等公民</a></li><li><a href=\\"#_1-2-高阶函数\\">1.2 高阶函数</a></li></ul></li></ul></nav>\\n<h2 id=\\"_1-函数式编程基础\\" tabindex=\\"-1\\">1. 函数式编程基础 <a class=\\"header-anchor\\" href=\\"#_1-函数式编程基础\\" aria-label=\\"Permalink to &quot;1. 函数式编程基础&quot;\\">&ZeroWidthSpace;</a></h2>\\n<h3 id=\\"_1-1-函数是一等公民\\" tabindex=\\"-1\\">1.1 函数是一等公民 <a class=\\"header-anchor\\" href=\\"#_1-1-函数是一等公民\\" aria-label=\\"Permalink to &quot;1.1 函数是一等公民&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>函数只是一个特殊的对象，可以用变量表示（函数是一等公民）</p>\\n<div class=\\"language-js\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #C792EA\\">function</span><span style=\\"color: #BABED8\\"> </span><span style=\\"color: #82AAFF\\">add</span><span style=\\"color: #89DDFF\\">(</span><span style=\\"color: #BABED8; font-style: italic\\">x</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #BABED8\\"> </span><span style=\\"color: #BABED8; font-style: italic\\">y</span><span style=\\"color: #89DDFF\\">)</span><span style=\\"color: #BABED8\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #89DDFF; font-style: italic\\">return</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #BABED8\\">x</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">+</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #BABED8\\">y</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #C792EA\\">const</span><span style=\\"color: #BABED8\\"> sum </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #BABED8\\"> add</span></span>\\n<span class=\\"line\\"><span style=\\"color: #82AAFF\\">sum</span><span style=\\"color: #BABED8\\">(</span><span style=\\"color: #F78C6C\\">1</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #BABED8\\"> </span><span style=\\"color: #F78C6C\\">2</span><span style=\\"color: #BABED8\\">) </span><span style=\\"color: #676E95; font-style: italic\\">// 3</span></span></code></pre>\\n</div><h3 id=\\"_1-2-高阶函数\\" tabindex=\\"-1\\">1.2 高阶函数 <a class=\\"header-anchor\\" href=\\"#_1-2-高阶函数\\" aria-label=\\"Permalink to &quot;1.2 高阶函数&quot;\\">&ZeroWidthSpace;</a></h3>\\n<ul>\\n<li>函数可以作为参数</li>\\n<li>函数可以作为返回值</li>\\n</ul>\\n<p>函数作为参数，模拟实现 forEach 函数：</p>\\n<div class=\\"language-js\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #C792EA\\">function</span><span style=\\"color: #BABED8\\"> </span><span style=\\"color: #82AAFF\\">myForEach</span><span style=\\"color: #89DDFF\\">(</span><span style=\\"color: #BABED8; font-style: italic\\">array</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #BABED8\\"> </span><span style=\\"color: #BABED8; font-style: italic\\">f</span><span style=\\"color: #89DDFF\\">)</span><span style=\\"color: #BABED8\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #89DDFF; font-style: italic\\">for</span><span style=\\"color: #F07178\\"> (</span><span style=\\"color: #C792EA\\">let</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #BABED8\\">i</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #F78C6C\\">0</span><span style=\\"color: #89DDFF\\">;</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #BABED8\\">i</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #BABED8\\">array</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #BABED8\\">length</span><span style=\\"color: #89DDFF\\">;</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #BABED8\\">i</span><span style=\\"color: #89DDFF\\">++</span><span style=\\"color: #F07178\\">) </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #82AAFF\\">f</span><span style=\\"color: #F07178\\">(</span><span style=\\"color: #BABED8\\">array</span><span style=\\"color: #F07178\\">[</span><span style=\\"color: #BABED8\\">i</span><span style=\\"color: #F07178\\">])</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #82AAFF\\">myForEach</span><span style=\\"color: #BABED8\\">([</span><span style=\\"color: #F78C6C\\">1</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #BABED8\\"> </span><span style=\\"color: #F78C6C\\">2</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #BABED8\\"> </span><span style=\\"color: #F78C6C\\">3</span><span style=\\"color: #BABED8\\">]</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #BABED8\\"> </span><span style=\\"color: #89DDFF\\">(</span><span style=\\"color: #BABED8; font-style: italic\\">itemÏ</span><span style=\\"color: #89DDFF\\">)</span><span style=\\"color: #BABED8\\"> </span><span style=\\"color: #C792EA\\">=&gt;</span><span style=\\"color: #BABED8\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #BABED8\\">console</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">log</span><span style=\\"color: #F07178\\">(</span><span style=\\"color: #BABED8\\">item</span><span style=\\"color: #F07178\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #BABED8\\">)</span></span></code></pre>\\n</div><p>函数作为返回值，封装一个 once 函数，生成一个只能执行一次的函数：</p>\\n<div class=\\"language-js\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #C792EA\\">function</span><span style=\\"color: #BABED8\\"> </span><span style=\\"color: #82AAFF\\">once</span><span style=\\"color: #89DDFF\\">(</span><span style=\\"color: #BABED8; font-style: italic\\">fn</span><span style=\\"color: #89DDFF\\">)</span><span style=\\"color: #BABED8\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #C792EA\\">let</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #BABED8\\">done</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #FF9CAC\\">false</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #89DDFF; font-style: italic\\">return</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">(...</span><span style=\\"color: #BABED8; font-style: italic\\">args</span><span style=\\"color: #89DDFF\\">)</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #C792EA\\">=&gt;</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #89DDFF; font-style: italic\\">if</span><span style=\\"color: #F07178\\"> (</span><span style=\\"color: #89DDFF\\">!</span><span style=\\"color: #BABED8\\">done</span><span style=\\"color: #F07178\\">) </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">      </span><span style=\\"color: #BABED8\\">done</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #FF9CAC\\">true</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">      </span><span style=\\"color: #89DDFF; font-style: italic\\">return</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #82AAFF\\">fn</span><span style=\\"color: #F07178\\">(</span><span style=\\"color: #89DDFF\\">...</span><span style=\\"color: #BABED8\\">args</span><span style=\\"color: #F07178\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #C792EA\\">const</span><span style=\\"color: #BABED8\\"> pay </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #BABED8\\"> </span><span style=\\"color: #82AAFF\\">once</span><span style=\\"color: #BABED8\\">(</span><span style=\\"color: #C792EA\\">function</span><span style=\\"color: #BABED8\\"> </span><span style=\\"color: #89DDFF\\">(</span><span style=\\"color: #BABED8; font-style: italic\\">money</span><span style=\\"color: #89DDFF\\">)</span><span style=\\"color: #BABED8\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #BABED8\\">console</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">log</span><span style=\\"color: #F07178\\">(</span><span style=\\"color: #89DDFF\\">`</span><span style=\\"color: #C3E88D\\">消费了</span><span style=\\"color: #89DDFF\\">${</span><span style=\\"color: #BABED8\\">money</span><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #C3E88D\\">元</span><span style=\\"color: #89DDFF\\">`</span><span style=\\"color: #F07178\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #BABED8\\">)</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #82AAFF\\">pay</span><span style=\\"color: #BABED8\\">(</span><span style=\\"color: #F78C6C\\">5</span><span style=\\"color: #BABED8\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #82AAFF\\">pay</span><span style=\\"color: #BABED8\\">(</span><span style=\\"color: #F78C6C\\">5</span><span style=\\"color: #BABED8\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #82AAFF\\">pay</span><span style=\\"color: #BABED8\\">(</span><span style=\\"color: #F78C6C\\">5</span><span style=\\"color: #BABED8\\">)</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #676E95; font-style: italic\\">//</span></span></code></pre>\\n</div>","tags":["JavaScript"],"category":"Article","date":{"raw":"2022-12-11","time":1670760000000,"formatted":"December 11, 2022","since":"about 1 year ago"}},{"title":"JavaScript 异步编程","author":"xcc","url":"/blog/posts/JavaScript-asyc.html","excerpt":"<p>JavaScript的一个核心特性是单线程执行，这里的单线程是指代码的执行是单线程的（宿主环境的API可以多线程），其最初的目的是为了避免多线程的DOM操作可能带来的错乱。优点是更安全简单，缺点是当遇到一个耗时任务时，后面的任务会被阻塞，从而拖延整个程序的执行。</p>\\n<p>为了解决耗时任务阻塞线程的问题，JavaScript将任务的执行模式分为了同步模式和异步模式，运行环境也提供了以同步或者异步模式运行的API。</p>\\n<ul>\\n<li><strong>同步模式</strong>: 任务排队执行，执行过程容易理解。</li>\\n<li><strong>异步模式</strong>: 对于耗时操作，开启过后就立即往后执行下一个任务，异步后续的逻辑一般通过回调函数的方式定义，在耗时任务执行过后就会自动执行传入的回调函数。</li>\\n</ul>\\n<img src=\\"/2023/promise0.png\\" width=\\"80%\\" style=\\"margin: 1% 10% 1% 10%;\\"/>\\n<p>JavaScript引擎会先执行完调用栈中的任务，然后通过事件循环从“消息队列”中再取一个出来执行，在此过程中，可以随时再往消息队列中添加任务。也正是因为大量的异步模式的API导致代码一些复杂的异步逻辑不易阅读。</p>\\n<nav class=\\"table-of-contents\\"><ul><li><a href=\\"#_1-回调函数\\">1. 回调函数</a></li><li><a href=\\"#_2-promise\\">2. Promise</a><ul><li><a href=\\"#_2-1-promise-的基本用法\\">2.1 Promise 的基本用法</a></li><li><a href=\\"#_2-2-promise-封装一个异步任务函数\\">2.2 Promise 封装一个异步任务函数</a></li><li><a href=\\"#_2-3-promise-的链式调用\\">2.3 Promise 的链式调用</a></li><li><a href=\\"#_2-4-promise-的异常处理\\">2.4 Promise 的异常处理</a></li><li><a href=\\"#_2-5-promise-的静态方法\\">2.5 Promise 的静态方法</a></li><li><a href=\\"#_2-6-promise-并行执行\\">2.6 Promise 并行执行</a></li><li><a href=\\"#_2-7-promise-的执行时序-宏任务-微任务\\">2.7 Promise 的执行时序（宏任务&amp;微任务）</a></li></ul></li></ul></nav>\\n<h2 id=\\"_1-回调函数\\" tabindex=\\"-1\\">1. 回调函数 <a class=\\"header-anchor\\" href=\\"#_1-回调函数\\" aria-label=\\"Permalink to &quot;1. 回调函数&quot;\\">&ZeroWidthSpace;</a></h2>\\n<p>回调函数是所有异步编程方案的根基，回调函数由调用者定义，交给执行者执行，具体用法就是把函数作为参数传递罢了。</p>\\n<p>除了传递回调函数参数以外，还有几种常见的实现异步的方式如事件机制、发布订阅，可以理解为回调函数的变体。</p>\\n<p>当使用传统回调方式去完成复杂的异步流程时，会无法避免大量的回调函数嵌套，造成回调地狱问题</p>\\n<div class=\\"language-js\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #82AAFF\\">setTimeout</span><span style=\\"color: #BABED8\\">(</span><span style=\\"color: #C792EA\\">function</span><span style=\\"color: #BABED8\\"> </span><span style=\\"color: #89DDFF\\">()</span><span style=\\"color: #BABED8\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #BABED8\\">console</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">log</span><span style=\\"color: #F07178\\">(</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">1.执行任务1 -&gt; 三秒后执行任务2</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #F07178\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #82AAFF\\">setTimeout</span><span style=\\"color: #F07178\\">(</span><span style=\\"color: #C792EA\\">function</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">()</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #BABED8\\">console</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">log</span><span style=\\"color: #F07178\\">(</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">2.执行任务2 -&gt; 2秒后执行任务1</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #F07178\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #82AAFF\\">setTimeout</span><span style=\\"color: #F07178\\">(</span><span style=\\"color: #C792EA\\">function</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">()</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">      </span><span style=\\"color: #BABED8\\">console</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">log</span><span style=\\"color: #F07178\\">(</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">3.执行任务3 -&gt; 1秒后执行完毕</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #F07178\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">      </span><span style=\\"color: #676E95; font-style: italic\\">// 回调地狱...</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #89DDFF\\">},</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #F78C6C\\">1000</span><span style=\\"color: #F07178\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #89DDFF\\">},</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #F78C6C\\">2000</span><span style=\\"color: #F07178\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">},</span><span style=\\"color: #BABED8\\"> </span><span style=\\"color: #F78C6C\\">3000</span><span style=\\"color: #BABED8\\">)</span></span></code></pre>\\n</div><h2 id=\\"_2-promise\\" tabindex=\\"-1\\">2. Promise <a class=\\"header-anchor\\" href=\\"#_2-promise\\" aria-label=\\"Permalink to &quot;2. Promise&quot;\\">&ZeroWidthSpace;</a></h2>\\n<p><strong>为了避免回调地狱问题</strong>，CommonJS社区提出了Promise规范，并在ES2015中被标准化。Promise实际上就是一个对象，用来表示一个异步任务执行过后究竟是成功还是失败，无论成功或失败只需要执行相应的回调函数即可。</p>\\n<img src=\\"/2023/promise1.png\\" width=\\"80%\\" style=\\"margin: 1% 10% 1% 10%;\\"/>\\n<h3 id=\\"_2-1-promise-的基本用法\\" tabindex=\\"-1\\">2.1 Promise 的基本用法 <a class=\\"header-anchor\\" href=\\"#_2-1-promise-的基本用法\\" aria-label=\\"Permalink to &quot;2.1 Promise 的基本用法&quot;\\">&ZeroWidthSpace;</a></h3>\\n<ol>\\n<li>构建Promise实例时传入一个函数，函数的参数为两个处理函数，在Promise里编写承诺的逻辑，即什么情况下成功，什么情况下失败，并在成功或失败时改变状态，执行提前注册的处理函数</li>\\n<li>使用then方法分别注册promise实例的onFulfilledon和onRejected回调函数</li>\\n<li>注意注册的函数不会立即执行，而是等待同步代码执行完才会执行（如下例）</li>\\n</ol>\\n<div class=\\"language-js\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #C792EA\\">let</span><span style=\\"color: #BABED8\\"> a </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #BABED8\\"> </span><span style=\\"color: #F78C6C\\">1</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #BABED8\\"> b </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #BABED8\\"> </span><span style=\\"color: #F78C6C\\">2</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #C792EA\\">const</span><span style=\\"color: #BABED8\\"> promise </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #BABED8\\"> </span><span style=\\"color: #89DDFF\\">new</span><span style=\\"color: #BABED8\\"> </span><span style=\\"color: #FFCB6B\\">Promise</span><span style=\\"color: #BABED8\\">(</span><span style=\\"color: #C792EA\\">function</span><span style=\\"color: #BABED8\\"> </span><span style=\\"color: #89DDFF\\">(</span><span style=\\"color: #BABED8; font-style: italic\\">res</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #BABED8\\"> </span><span style=\\"color: #BABED8; font-style: italic\\">rej</span><span style=\\"color: #89DDFF\\">)</span><span style=\\"color: #BABED8\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #89DDFF; font-style: italic\\">if</span><span style=\\"color: #F07178\\"> (</span><span style=\\"color: #BABED8\\">a</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">&gt;</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #BABED8\\">b</span><span style=\\"color: #F07178\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #82AAFF\\">res</span><span style=\\"color: #F07178\\">(</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">success</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #F07178\\">) </span><span style=\\"color: #676E95; font-style: italic\\">// 成功时调用res函数</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #89DDFF; font-style: italic\\">else</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #82AAFF\\">rej</span><span style=\\"color: #F07178\\">(</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">fail</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #F07178\\">)    </span><span style=\\"color: #676E95; font-style: italic\\">// 失败时调用rej函数</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #BABED8\\">)</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #BABED8\\">promise</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">then</span><span style=\\"color: #BABED8\\">(</span><span style=\\"color: #C792EA\\">function</span><span style=\\"color: #BABED8\\"> </span><span style=\\"color: #89DDFF\\">(</span><span style=\\"color: #BABED8; font-style: italic\\">sucStr</span><span style=\\"color: #89DDFF\\">)</span><span style=\\"color: #BABED8\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #BABED8\\">console</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">log</span><span style=\\"color: #F07178\\">(</span><span style=\\"color: #BABED8\\">sucStr</span><span style=\\"color: #F07178\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">},</span><span style=\\"color: #BABED8\\"> </span><span style=\\"color: #C792EA\\">function</span><span style=\\"color: #BABED8\\"> </span><span style=\\"color: #89DDFF\\">(</span><span style=\\"color: #BABED8; font-style: italic\\">failStr</span><span style=\\"color: #89DDFF\\">)</span><span style=\\"color: #BABED8\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #BABED8\\">console</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">log</span><span style=\\"color: #F07178\\">(</span><span style=\\"color: #BABED8\\">failStr</span><span style=\\"color: #F07178\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #BABED8\\">)</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #BABED8\\">console</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">log</span><span style=\\"color: #BABED8\\">(</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">第一个同步任务执行才会执行提前注册的异步处理函数</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #BABED8\\">)</span></span></code></pre>\\n</div><h3 id=\\"_2-2-promise-封装一个异步任务函数\\" tabindex=\\"-1\\">2.2 Promise 封装一个异步任务函数 <a class=\\"header-anchor\\" href=\\"#_2-2-promise-封装一个异步任务函数\\" aria-label=\\"Permalink to &quot;2.2 Promise 封装一个异步任务函数&quot;\\">&ZeroWidthSpace;</a></h3>\\n<div class=\\"language-js\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #676E95; font-style: italic\\">// 使用promise封装一个ajax请求</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C792EA\\">function</span><span style=\\"color: #BABED8\\"> </span><span style=\\"color: #82AAFF\\">ajax</span><span style=\\"color: #89DDFF\\">(</span><span style=\\"color: #BABED8; font-style: italic\\">url</span><span style=\\"color: #89DDFF\\">)</span><span style=\\"color: #BABED8\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #89DDFF; font-style: italic\\">return</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">new</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #FFCB6B\\">Promise</span><span style=\\"color: #F07178\\">(</span><span style=\\"color: #C792EA\\">function</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">(</span><span style=\\"color: #BABED8; font-style: italic\\">resolve</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #BABED8; font-style: italic\\">reject</span><span style=\\"color: #89DDFF\\">)</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #C792EA\\">let</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #BABED8\\">xhr</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">new</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #82AAFF\\">XMLHttpRequest</span><span style=\\"color: #F07178\\">()</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #BABED8\\">xhr</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">open</span><span style=\\"color: #F07178\\">(</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">GET</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #BABED8\\">url</span><span style=\\"color: #F07178\\">)        </span><span style=\\"color: #676E95; font-style: italic\\">// 指定请求方法和地址</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #BABED8\\">xhr</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #BABED8\\">responseType</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">json</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #F07178\\">   </span><span style=\\"color: #676E95; font-style: italic\\">// 指定相应类型为json</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #BABED8\\">xhr</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">onload</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #C792EA\\">function</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">()</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">{</span><span style=\\"color: #F07178\\">  </span><span style=\\"color: #676E95; font-style: italic\\">// 请求完成后执行onload函数</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">      </span><span style=\\"color: #89DDFF; font-style: italic\\">if</span><span style=\\"color: #F07178\\"> (</span><span style=\\"color: #89DDFF\\">this.</span><span style=\\"color: #BABED8\\">status</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">===</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #F78C6C\\">200</span><span style=\\"color: #F07178\\">) </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">        </span><span style=\\"color: #82AAFF\\">resolve</span><span style=\\"color: #F07178\\">(</span><span style=\\"color: #89DDFF\\">this.</span><span style=\\"color: #BABED8\\">response</span><span style=\\"color: #F07178\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">      </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">      </span><span style=\\"color: #89DDFF; font-style: italic\\">else</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">        </span><span style=\\"color: #82AAFF\\">reject</span><span style=\\"color: #F07178\\">(</span><span style=\\"color: #89DDFF\\">new</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #82AAFF\\">Error</span><span style=\\"color: #F07178\\">(</span><span style=\\"color: #89DDFF\\">this.</span><span style=\\"color: #BABED8\\">status</span><span style=\\"color: #F07178\\">))</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">      </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">      </span><span style=\\"color: #BABED8\\">xhr</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">send</span><span style=\\"color: #F07178\\">()</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #F07178\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #82AAFF\\">ajax</span><span style=\\"color: #BABED8\\">(</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">/user.json</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #BABED8\\">)</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">then</span><span style=\\"color: #BABED8\\">(</span><span style=\\"color: #C792EA\\">function</span><span style=\\"color: #BABED8\\"> </span><span style=\\"color: #89DDFF\\">(</span><span style=\\"color: #BABED8; font-style: italic\\">res</span><span style=\\"color: #89DDFF\\">)</span><span style=\\"color: #BABED8\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #BABED8\\">console</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">log</span><span style=\\"color: #F07178\\">(</span><span style=\\"color: #BABED8\\">res</span><span style=\\"color: #F07178\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">},</span><span style=\\"color: #BABED8\\"> </span><span style=\\"color: #C792EA\\">function</span><span style=\\"color: #BABED8\\"> </span><span style=\\"color: #89DDFF\\">(</span><span style=\\"color: #BABED8; font-style: italic\\">err</span><span style=\\"color: #89DDFF\\">)</span><span style=\\"color: #BABED8\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #BABED8\\">console</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">log</span><span style=\\"color: #F07178\\">(</span><span style=\\"color: #BABED8\\">err</span><span style=\\"color: #F07178\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #BABED8\\">)</span></span></code></pre>\\n</div><h3 id=\\"_2-3-promise-的链式调用\\" tabindex=\\"-1\\">2.3 Promise 的链式调用 <a class=\\"header-anchor\\" href=\\"#_2-3-promise-的链式调用\\" aria-label=\\"Permalink to &quot;2.3 Promise 的链式调用&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>promise的本质也是使用回调函数，即通过then方法传递进去，而且promise将回调分成了两种即成功的回调和失败的回调。但是如果需要串联执行多个异步任务，还是会出现回调地狱的问题，这时候使用promise就没有任何意义了，还额外增加了复杂度。</p>\\n<p>所以嵌套使用promise是不可取的，正确的做法是使用promise方法链式调用的特点来尽量保证串联异步任务的 “扁平化”。</p>\\n<ul>\\n<li>promise的then方法会返回一个<strong>全新的</strong>promise对象，用于实现promise的链式调用</li>\\n<li>后面的then就是在为前面then返回的promise注册回调</li>\\n<li>前面then方法中调用函数的返回值会作为后面then方法回调的参数</li>\\n<li>若回调中返回的是一个promise对象，则后面then方法的回调会等待他的结束</li>\\n</ul>\\n<div class=\\"language-js\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #82AAFF\\">ajax</span><span style=\\"color: #BABED8\\">(</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">api/url1</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #BABED8\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #BABED8\\">\\t</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">then</span><span style=\\"color: #BABED8\\">(</span><span style=\\"color: #BABED8; font-style: italic\\">value</span><span style=\\"color: #BABED8\\"> </span><span style=\\"color: #C792EA\\">=&gt;</span><span style=\\"color: #BABED8\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">\\t\\t</span><span style=\\"color: #89DDFF; font-style: italic\\">return</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #82AAFF\\">ajax</span><span style=\\"color: #F07178\\">(</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">api/url2</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #F07178\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #BABED8\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #BABED8\\">\\t</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">then</span><span style=\\"color: #BABED8\\">(</span><span style=\\"color: #BABED8; font-style: italic\\">value</span><span style=\\"color: #BABED8\\"> </span><span style=\\"color: #C792EA\\">=&gt;</span><span style=\\"color: #BABED8\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">\\t\\t</span><span style=\\"color: #89DDFF; font-style: italic\\">return</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #82AAFF\\">ajax</span><span style=\\"color: #F07178\\">(</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">api/url3</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #F07178\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #BABED8\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #BABED8\\">\\t</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">then</span><span style=\\"color: #BABED8\\">(</span><span style=\\"color: #BABED8; font-style: italic\\">value</span><span style=\\"color: #BABED8\\"> </span><span style=\\"color: #C792EA\\">=&gt;</span><span style=\\"color: #BABED8\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">\\t\\t</span><span style=\\"color: #89DDFF; font-style: italic\\">return</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #82AAFF\\">ajax</span><span style=\\"color: #F07178\\">(</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">api/url4</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #F07178\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #BABED8\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #BABED8\\">\\t</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">catch</span><span style=\\"color: #BABED8\\">(</span><span style=\\"color: #BABED8; font-style: italic\\">error</span><span style=\\"color: #BABED8\\"> </span><span style=\\"color: #C792EA\\">=&gt;</span><span style=\\"color: #BABED8\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">\\t\\t</span><span style=\\"color: #BABED8\\">console</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">log</span><span style=\\"color: #F07178\\">(</span><span style=\\"color: #BABED8\\">error</span><span style=\\"color: #F07178\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #BABED8\\">)</span></span></code></pre>\\n</div><p>多次catch的链式调用（<em>for test</em>）：</p>\\n<div class=\\"language-js\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #C792EA\\">const</span><span style=\\"color: #BABED8\\"> p </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #BABED8\\"> </span><span style=\\"color: #FFCB6B\\">Promise</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">reject</span><span style=\\"color: #BABED8\\">(</span><span style=\\"color: #89DDFF\\">new</span><span style=\\"color: #BABED8\\"> </span><span style=\\"color: #82AAFF\\">Error</span><span style=\\"color: #BABED8\\">(</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">fail1</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #BABED8\\">))</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #BABED8\\">p</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">catch</span><span style=\\"color: #BABED8\\">(</span><span style=\\"color: #BABED8; font-style: italic\\">err</span><span style=\\"color: #BABED8\\"> </span><span style=\\"color: #C792EA\\">=&gt;</span><span style=\\"color: #BABED8\\"> console</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">log</span><span style=\\"color: #BABED8\\">(err))</span></span>\\n<span class=\\"line\\"><span style=\\"color: #BABED8\\">\\t</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">then</span><span style=\\"color: #BABED8\\">(</span><span style=\\"color: #89DDFF\\">()</span><span style=\\"color: #C792EA\\">=&gt;</span><span style=\\"color: #BABED8\\">console</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">log</span><span style=\\"color: #BABED8\\">(</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">ok1</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #BABED8\\">))</span></span>\\n<span class=\\"line\\"><span style=\\"color: #BABED8\\">\\t</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">then</span><span style=\\"color: #BABED8\\">(</span><span style=\\"color: #89DDFF\\">()</span><span style=\\"color: #C792EA\\">=&gt;</span><span style=\\"color: #BABED8\\">console</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">log</span><span style=\\"color: #BABED8\\">(</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">ok2</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #BABED8\\">))</span></span>\\n<span class=\\"line\\"><span style=\\"color: #BABED8\\">\\t</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">then</span><span style=\\"color: #BABED8\\">(</span><span style=\\"color: #89DDFF\\">()</span><span style=\\"color: #C792EA\\">=&gt;</span><span style=\\"color: #89DDFF\\">{</span><span style=\\"color: #89DDFF; font-style: italic\\">throw</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">new</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #82AAFF\\">Error</span><span style=\\"color: #F07178\\">(</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">fail2</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #F07178\\">)</span><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #BABED8\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #BABED8\\">\\t</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">catch</span><span style=\\"color: #BABED8\\">(</span><span style=\\"color: #BABED8; font-style: italic\\">err</span><span style=\\"color: #BABED8\\"> </span><span style=\\"color: #C792EA\\">=&gt;</span><span style=\\"color: #BABED8\\"> console</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">log</span><span style=\\"color: #BABED8\\">(err))</span></span>\\n<span class=\\"line\\"><span style=\\"color: #BABED8\\">\\t</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">then</span><span style=\\"color: #BABED8\\">(</span><span style=\\"color: #89DDFF\\">()</span><span style=\\"color: #C792EA\\">=&gt;</span><span style=\\"color: #BABED8\\">console</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">log</span><span style=\\"color: #BABED8\\">(</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">ok3</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #BABED8\\">))</span></span>\\n<span class=\\"line\\"><span style=\\"color: #BABED8\\">\\t</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">then</span><span style=\\"color: #BABED8\\">(</span><span style=\\"color: #89DDFF\\">()</span><span style=\\"color: #C792EA\\">=&gt;</span><span style=\\"color: #BABED8\\">console</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">log</span><span style=\\"color: #BABED8\\">(</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">ok4</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #BABED8\\">))</span></span></code></pre>\\n</div><h3 id=\\"_2-4-promise-的异常处理\\" tabindex=\\"-1\\">2.4 Promise 的异常处理 <a class=\\"header-anchor\\" href=\\"#_2-4-promise-的异常处理\\" aria-label=\\"Permalink to &quot;2.4 Promise 的异常处理&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>除了promise的执行逻辑执行了reject函数，在promise在执行的过程中出现错误或者主动抛出异常也会执行reject函数，所以then方法中注册的onrejected函数就是为promise的异常做处理，即promise失败或者出现异常都会被执行。其实onrejected函数的注册还有一个更常见的用法，即使用promise实例的catch方法注册onrejected回调</p>\\n<div class=\\"language-js\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #82AAFF\\">ajax</span><span style=\\"color: #BABED8\\">(</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">/user.json</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #BABED8\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #BABED8\\">  </span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">then</span><span style=\\"color: #BABED8\\">(</span><span style=\\"color: #C792EA\\">function</span><span style=\\"color: #BABED8\\"> </span><span style=\\"color: #82AAFF\\">onFulfilled</span><span style=\\"color: #89DDFF\\">(</span><span style=\\"color: #BABED8; font-style: italic\\">res</span><span style=\\"color: #89DDFF\\">)</span><span style=\\"color: #BABED8\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #BABED8\\">console</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">log</span><span style=\\"color: #F07178\\">(</span><span style=\\"color: #BABED8\\">res</span><span style=\\"color: #F07178\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #BABED8\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #BABED8\\">  </span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">catch</span><span style=\\"color: #BABED8\\">(</span><span style=\\"color: #C792EA\\">function</span><span style=\\"color: #BABED8\\"> </span><span style=\\"color: #82AAFF\\">onRejcted</span><span style=\\"color: #89DDFF\\">(</span><span style=\\"color: #BABED8; font-style: italic\\">error</span><span style=\\"color: #89DDFF\\">)</span><span style=\\"color: #BABED8\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #BABED8\\">console</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">log</span><span style=\\"color: #F07178\\">(</span><span style=\\"color: #BABED8\\">error</span><span style=\\"color: #F07178\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #BABED8\\">)</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #676E95; font-style: italic\\">// 等同于</span></span>\\n<span class=\\"line\\"><span style=\\"color: #82AAFF\\">ajax</span><span style=\\"color: #BABED8\\">(</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">/user.json</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #BABED8\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #BABED8\\">  </span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">then</span><span style=\\"color: #BABED8\\">(</span><span style=\\"color: #C792EA\\">function</span><span style=\\"color: #BABED8\\"> </span><span style=\\"color: #82AAFF\\">onFulfilled</span><span style=\\"color: #89DDFF\\">(</span><span style=\\"color: #BABED8; font-style: italic\\">res</span><span style=\\"color: #89DDFF\\">)</span><span style=\\"color: #BABED8\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #BABED8\\">console</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">log</span><span style=\\"color: #F07178\\">(</span><span style=\\"color: #BABED8\\">res</span><span style=\\"color: #F07178\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #BABED8\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #BABED8\\">  </span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">then</span><span style=\\"color: #BABED8\\">(</span><span style=\\"color: #89DDFF\\">undefined,</span><span style=\\"color: #BABED8\\"> </span><span style=\\"color: #C792EA\\">function</span><span style=\\"color: #BABED8\\"> </span><span style=\\"color: #82AAFF\\">onRejcted</span><span style=\\"color: #89DDFF\\">(</span><span style=\\"color: #BABED8; font-style: italic\\">error</span><span style=\\"color: #89DDFF\\">)</span><span style=\\"color: #BABED8\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #BABED8\\">console</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">log</span><span style=\\"color: #F07178\\">(</span><span style=\\"color: #BABED8\\">error</span><span style=\\"color: #F07178\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #BABED8\\">)</span></span></code></pre>\\n</div><p>用catch方法更常见，因为更适合链式调用。错误会随着promise链条传递，所以最后使用c<strong>atch方法更像是给整个promise链条注册的失败回调</strong></p>\\n<h3 id=\\"_2-5-promise-的静态方法\\" tabindex=\\"-1\\">2.5 Promise 的静态方法 <a class=\\"header-anchor\\" href=\\"#_2-5-promise-的静态方法\\" aria-label=\\"Permalink to &quot;2.5 Promise 的静态方法&quot;\\">&ZeroWidthSpace;</a></h3>\\n<div class=\\"language-js\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #FFCB6B\\">Promise</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">resolve</span><span style=\\"color: #BABED8\\">(</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">success</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #BABED8\\">)  </span><span style=\\"color: #676E95; font-style: italic\\">// 直接返回一个成功的Promise对象</span></span>\\n<span class=\\"line\\"><span style=\\"color: #FFCB6B\\">Promise</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">resolve</span><span style=\\"color: #BABED8\\">(promise)    </span><span style=\\"color: #676E95; font-style: italic\\">// 如果接收到一个promise对象则原样返回</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #FFCB6B\\">Promise</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">reject</span><span style=\\"color: #BABED8\\">(</span><span style=\\"color: #89DDFF\\">new</span><span style=\\"color: #BABED8\\"> </span><span style=\\"color: #82AAFF\\">Error</span><span style=\\"color: #BABED8\\">(</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">rejected</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #BABED8\\">)) </span><span style=\\"color: #676E95; font-style: italic\\">// 快速得到一个一定是失败的promise对象</span></span>\\n<span class=\\"line\\"><span style=\\"color: #BABED8\\">\\t</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">catch</span><span style=\\"color: #BABED8\\">(</span><span style=\\"color: #BABED8; font-style: italic\\">error</span><span style=\\"color: #BABED8\\"> </span><span style=\\"color: #C792EA\\">=&gt;</span><span style=\\"color: #BABED8\\"> console</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">log</span><span style=\\"color: #BABED8\\">(err))</span></span></code></pre>\\n</div><h3 id=\\"_2-6-promise-并行执行\\" tabindex=\\"-1\\">2.6 Promise 并行执行 <a class=\\"header-anchor\\" href=\\"#_2-6-promise-并行执行\\" aria-label=\\"Permalink to &quot;2.6 Promise 并行执行&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>前面都是多个promise串联执行异步任务，而当多个任务彼此没有依赖时可以并行执行来提高执行速度，Promise.all方法可以将多个promise合并为一个promise统一管理。Promise.all()接收一个数组，数组中每个元素都是一个promise对象，并返回一个全新的promise对象，当其内部所有的promise都完成后，这个新的promise对象才会完成，且其拿到的结果也是一个数组，数组包含每个异步任务执行的结果。其中任何一个promise失败，这个新的promise也就失败了。</p>\\n<p>示例：先拿到要访问的url列表，再并行访问</p>\\n<div class=\\"language-js\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #82AAFF\\">ajax</span><span style=\\"color: #BABED8\\">(</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">/urls.json</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #BABED8\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #BABED8\\">  </span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">then</span><span style=\\"color: #BABED8\\">(</span><span style=\\"color: #BABED8; font-style: italic\\">value</span><span style=\\"color: #BABED8\\"> </span><span style=\\"color: #C792EA\\">=&gt;</span><span style=\\"color: #BABED8\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #C792EA\\">const</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #BABED8\\">urls</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #BABED8\\">Object</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">values</span><span style=\\"color: #F07178\\">(</span><span style=\\"color: #BABED8\\">value</span><span style=\\"color: #F07178\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #C792EA\\">const</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #BABED8\\">tasks</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #BABED8\\">urls</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">map</span><span style=\\"color: #F07178\\">(</span><span style=\\"color: #BABED8; font-style: italic\\">map</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #C792EA\\">=&gt;</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #82AAFF\\">ajax</span><span style=\\"color: #F07178\\">(</span><span style=\\"color: #BABED8\\">url</span><span style=\\"color: #F07178\\">))</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #89DDFF; font-style: italic\\">return</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #FFCB6B\\">Promise</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">all</span><span style=\\"color: #F07178\\">(</span><span style=\\"color: #BABED8\\">tasks</span><span style=\\"color: #F07178\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #BABED8\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #BABED8\\">  </span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">then</span><span style=\\"color: #BABED8\\">(</span><span style=\\"color: #BABED8; font-style: italic\\">values</span><span style=\\"color: #BABED8\\"> </span><span style=\\"color: #C792EA\\">=&gt;</span><span style=\\"color: #BABED8\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #BABED8\\">console</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">log</span><span style=\\"color: #F07178\\">(</span><span style=\\"color: #BABED8\\">values</span><span style=\\"color: #F07178\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #BABED8\\">)</span></span></code></pre>\\n</div><p>Promise.race()也可以将多个promise合并为一个promise对象，但Promise.all()等待所有任务结束才会结束，而Promise.race()只会等待第一个先结束的任务。</p>\\n<p>示例：一个请求promise+一个定时promise用于处理请求超时</p>\\n<div class=\\"language-js\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #C792EA\\">const</span><span style=\\"color: #BABED8\\"> request </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #BABED8\\"> </span><span style=\\"color: #82AAFF\\">ajax</span><span style=\\"color: #BABED8\\">(</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">/urls.json</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #BABED8\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C792EA\\">const</span><span style=\\"color: #BABED8\\"> timeout </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #BABED8\\"> </span><span style=\\"color: #89DDFF\\">new</span><span style=\\"color: #BABED8\\"> </span><span style=\\"color: #FFCB6B\\">Promise</span><span style=\\"color: #BABED8\\">(</span><span style=\\"color: #89DDFF\\">(</span><span style=\\"color: #BABED8; font-style: italic\\">resolve</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #BABED8\\"> </span><span style=\\"color: #BABED8; font-style: italic\\">reject</span><span style=\\"color: #89DDFF\\">)</span><span style=\\"color: #BABED8\\"> </span><span style=\\"color: #C792EA\\">=&gt;</span><span style=\\"color: #BABED8\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #82AAFF\\">setTimeout</span><span style=\\"color: #F07178\\">(</span><span style=\\"color: #89DDFF\\">()</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #C792EA\\">=&gt;</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #82AAFF\\">reject</span><span style=\\"color: #F07178\\">(</span><span style=\\"color: #89DDFF\\">new</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #82AAFF\\">Error</span><span style=\\"color: #F07178\\">(</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">timeout</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #F07178\\">))</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #F78C6C\\">500</span><span style=\\"color: #F07178\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #BABED8\\">)</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #FFCB6B\\">Promise</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">race</span><span style=\\"color: #BABED8\\">([</span></span>\\n<span class=\\"line\\"><span style=\\"color: #BABED8\\">  request</span><span style=\\"color: #89DDFF\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #BABED8\\">  timeout</span></span>\\n<span class=\\"line\\"><span style=\\"color: #BABED8\\">])</span></span>\\n<span class=\\"line\\"><span style=\\"color: #BABED8\\">  </span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">then</span><span style=\\"color: #BABED8\\">(</span><span style=\\"color: #BABED8; font-style: italic\\">value</span><span style=\\"color: #BABED8\\"> </span><span style=\\"color: #C792EA\\">=&gt;</span><span style=\\"color: #BABED8\\"> </span><span style=\\"color: #89DDFF\\">{</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #BABED8\\">console</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">log</span><span style=\\"color: #F07178\\">(</span><span style=\\"color: #BABED8\\">value</span><span style=\\"color: #F07178\\">) </span><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #BABED8\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #BABED8\\">  </span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">catch</span><span style=\\"color: #BABED8\\">(</span><span style=\\"color: #BABED8; font-style: italic\\">error</span><span style=\\"color: #BABED8\\"> </span><span style=\\"color: #C792EA\\">=&gt;</span><span style=\\"color: #BABED8\\"> </span><span style=\\"color: #89DDFF\\">{</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #BABED8\\">console</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">log</span><span style=\\"color: #F07178\\">(</span><span style=\\"color: #BABED8\\">error</span><span style=\\"color: #F07178\\">) </span><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #BABED8\\">)</span></span></code></pre>\\n</div><h3 id=\\"_2-7-promise-的执行时序-宏任务-微任务\\" tabindex=\\"-1\\">2.7 Promise 的执行时序（宏任务&amp;微任务） <a class=\\"header-anchor\\" href=\\"#_2-7-promise-的执行时序-宏任务-微任务\\" aria-label=\\"Permalink to &quot;2.7 Promise 的执行时序（宏任务&amp;微任务）&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>即使Promise没有任何的异步操作，它的回调函数仍然不会立即执行而是进入回调队列中排队，即等待所有同步代码执行完后才会执行。</p>\\n<p>但在回调队列中排队等待的任务并不是平等的。回调队列中的任务称为宏任务，宏任务的执行过程中可以临时加上一些额外需求，这些临时需求可以作为新的宏任务进到队列排队（如下setTimeout回调），也可以作为当前任务的微任务，直接在本轮调用的末尾立即执行（如下Promise回调），微任务的概念是后来才提到JS中的，目的是为了提高整体响应能力。目前绝大多数异步调用的API都是作为宏任务执行，而作为微任务的有Promise &amp; MutationObserver &amp; Node中的process.nextTick</p>\\n<aside>\\n💡 在浏览器环境中有两个任务队列：宏任务和微任务队列，微任务队列优先级更高，所以同步代码执行完或每次一个宏任务执行完后，都会优先清空微任务队列。\\n<p>在Node中，任务队列的优先级划分比浏览器更加细化。</p>\\n</aside>\\n<div class=\\"language-js\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #BABED8\\">console</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">log</span><span style=\\"color: #BABED8\\">(</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">start</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #BABED8\\">)</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #82AAFF\\">setTimeout</span><span style=\\"color: #BABED8\\">(</span><span style=\\"color: #89DDFF\\">()</span><span style=\\"color: #BABED8\\"> </span><span style=\\"color: #C792EA\\">=&gt;</span><span style=\\"color: #BABED8\\"> console</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">log</span><span style=\\"color: #BABED8\\">(</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">settimeout</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #BABED8\\">)</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #BABED8\\"> </span><span style=\\"color: #F78C6C\\">0</span><span style=\\"color: #BABED8\\">)</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #FFCB6B\\">Promise</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">resolve</span><span style=\\"color: #BABED8\\">()</span></span>\\n<span class=\\"line\\"><span style=\\"color: #BABED8\\">  </span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">then</span><span style=\\"color: #BABED8\\">(</span><span style=\\"color: #89DDFF\\">()</span><span style=\\"color: #BABED8\\"> </span><span style=\\"color: #C792EA\\">=&gt;</span><span style=\\"color: #BABED8\\"> console</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">log</span><span style=\\"color: #BABED8\\">(</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">promise1</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #BABED8\\">))</span></span>\\n<span class=\\"line\\"><span style=\\"color: #BABED8\\">  </span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">then</span><span style=\\"color: #BABED8\\">(</span><span style=\\"color: #89DDFF\\">()</span><span style=\\"color: #BABED8\\"> </span><span style=\\"color: #C792EA\\">=&gt;</span><span style=\\"color: #BABED8\\"> console</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">log</span><span style=\\"color: #BABED8\\">(</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">promise2</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #BABED8\\">))</span></span>\\n<span class=\\"line\\"><span style=\\"color: #BABED8\\">  </span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">then</span><span style=\\"color: #BABED8\\">(</span><span style=\\"color: #89DDFF\\">()</span><span style=\\"color: #BABED8\\"> </span><span style=\\"color: #C792EA\\">=&gt;</span><span style=\\"color: #BABED8\\"> console</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">log</span><span style=\\"color: #BABED8\\">(</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">promise3</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #BABED8\\">))</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #BABED8\\">console</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">log</span><span style=\\"color: #BABED8\\">(</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">end</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #BABED8\\">)</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #676E95; font-style: italic\\">//</span></span></code></pre>\\n</div>","tags":["JavaScript"],"category":"Article","date":{"raw":"2022-12-01","time":1669896000000,"formatted":"December 1, 2022","since":"about 1 year ago"}},{"title":"JavaScript 基于原型的面向对象","author":"xcc","url":"/blog/posts/JavaScript-prototype.html","excerpt":"","tags":["JavaScript"],"category":"Article","date":{"raw":"2022-01-15","time":1642248000000,"formatted":"January 15, 2022","since":"almost 2 years ago"}}]');function v(){const a=R(),s=a.path;function n(){const D=_.findIndex(B=>B.url===a.path);return D===-1&&console.error(`blog post missing: ${a.path}`),D}const o=f(()=>_[n()]),r=f(()=>_[n()-1]),y=f(()=>_[n()+1]);return{posts:_,post:o,nextPost:r,prevPost:y,path:s}}const Bs=F({__name:"VPBPostCategory",props:{category:{}},setup(a){const{theme:s}=h();return(n,o)=>{var r;return e(),t("div",null,[(r=p(s).blog)!=null&&r.categoryIcons&&p(s).blog.categoryIcons[n.category.toLowerCase()]?(e(),t("div",{key:0,class:b([p(s).blog.categoryIcons[n.category.toLowerCase()],"mr-2"])},null,2)):i("",!0),l("span",null,c(n.category),1)])}}});const I=S(Bs,[["__scopeId","data-v-780fdfbe"]]),k=JSON.parse('[{"name":"xcc","avatar":"/avatar.jpg","gravatar":null,"twitter":null,"url":"/blog/authors/ai-writer.html","excerpt":""}]');function J(){const a=R(),s=a.path;function n(B){return k.find(A=>A.name===B)}function o(){const B=k.findIndex(A=>A.url===a.path);return B===-1&&console.error(`author page missing: ${a.path}`),B}const r=f(()=>k[o()]),y=f(()=>k[o()-1]),D=f(()=>k[o()+1]);return{authors:k,author:r,nextAuthor:y,prevAuthor:D,findByName:n,path:s}}const As={key:0,class:"flex items-center space-x-4"},ds=["src","alt"],us=["src","alt"],hs=["href"],Es={class:"font-medium dark:text-white"},ms={key:1},_s=F({__name:"VPBHomeAuthor",props:{name:{}},setup(a){const s=a;h();const{findByName:n}=J(),o=f(()=>n(s.name));return(r,y)=>o.value?(e(),t("div",As,[o.value.avatar?(e(),t("img",{key:0,class:"h-7 w-7 rounded-full",src:o.value.avatar,alt:o.value.name},null,8,ds)):o.value.gravatar?(e(),t("img",{key:1,class:"h-7 w-7 rounded-full",src:`https://gravatar.com/avatar/${o.value.gravatar}`,alt:o.value.name},null,8,us)):i("",!0),l("a",{href:p(u)(o.value.url),class:"inline-flex items-center font-medium hover:text-[color:var(--vp-c-brand-dark)]"},[l("span",Es,c(o.value.name),1)],8,hs)])):(e(),t("div",ms))}}),gs={class:"rounded-lg border border-[color:var(--vp-c-brand-light)] p-6 shadow-md dark:border-[color:var(--vp-c-brand-dark)]"},fs={class:"mb-5 flex items-center justify-between text-gray-500"},vs={class:"bg-primary-100 inline-flex items-center rounded text-sm font-medium text-[color:var(--vp-c-brand-light)] dark:text-[color:var(--vp-c-brand-dark)]"},xs={class:"text-sm"},bs={class:"mb-2 text-2xl font-bold tracking-tight text-[color:var(--vp-c-brand-light)] dark:text-[color:var(--vp-c-brand-dark)]"},Cs=["href"],ks=["innerHTML"],Ps={class:"flex items-center justify-between"},$s=["href"],ws=l("div",{class:"i-[bx/right-arrow-alt] ml-2"},null,-1),Z=F({__name:"VPBHomePost",props:{post:{}},setup(a){return(s,n)=>(e(),t("article",gs,[l("div",fs,[l("span",vs,[d(I,{category:s.post.category},{default:P(()=>[l("span",xs,c(s.post.date.since),1)]),_:1},8,["category"])])]),l("h2",bs,[l("a",{href:s.post.url},c(s.post.title),9,Cs)]),l("div",{class:"mb-5 font-light",innerHTML:s.post.excerpt},null,8,ks),l("div",Ps,[d(_s,{name:s.post.author},null,8,["name"]),l("a",{href:s.post.url,class:"inline-flex items-center font-medium hover:text-[color:var(--vp-c-brand-dark)]"},[$(" Read more "),ws],8,$s)])]))}}),js={class:"mx-auto max-w-screen-xl lg:px-6 lg:py-16"},Ss={class:"mx-auto mb-8 max-w-screen-sm text-center lg:mb-16"},Vs={class:"mb-4 text-3xl font-extrabold tracking-tight text-[color:var(--vp-c-brand-light)] dark:text-[color:var(--vp-c-brand-dark)] lg:text-4xl"},Ts={class:"font-light text-[color:var(--vp-c-text-light-1)] dark:text-[color:var(--vp-c-text-dark-1)] sm:text-xl"},qs={class:"grid gap-6 p-2 lg:grid-cols-2"},Ls=F({__name:"VPBHome",setup(a){const{posts:s}=v(),{theme:n}=h();return(o,r)=>{var y,D;return e(),t("div",js,[l("div",Ss,[l("h2",Vs,c((y=p(n).blog)==null?void 0:y.title),1),l("p",Ts,c((D=p(n).blog)==null?void 0:D.description),1)]),l("div",qs,[(e(!0),t(g,null,j(p(s),B=>(e(),t("div",{key:B.url},[d(Z,{post:B},null,8,["post"])]))),128))])])}}}),Is=l("dt",{class:"sr-only"},"Published on",-1),Js={class:"text-base font-medium leading-6 text-gray-500 dark:text-gray-300"},Rs=["datetime"],Os=F({__name:"VPBPostDate",setup(a){const{post:s}=v();function n(){return new Date(s.value.date.time).toISOString()}return(o,r)=>(e(),t("dl",null,[Is,l("dd",Js,[l("time",{datetime:n()},c(p(s).date.formatted),9,Rs)])]))}}),M=a=>(O("data-v-b9d31fef"),a=a(),H(),a),Hs=M(()=>l("dt",{class:"sr-only"},"Authors",-1)),Ws={class:"flex justify-center space-x-8 sm:space-x-12 xl:block xl:space-x-0 xl:space-y-8"},Zs={key:0,class:"flex items-center space-x-2"},Ms=["src"],Ns=["src"],Gs={class:"whitespace-nowrap text-sm font-medium leading-5"},Us=M(()=>l("dt",{class:"sr-only"},"Name",-1)),Ys={class:"text-gray-900 dark:text-white"},zs=["href"],Qs={key:0,class:"sr-only"},Xs={key:1},Ks=["href"],sn=F({__name:"VPBPostAuthor",props:{insideDoc:{type:Boolean}},setup(a){const{findByName:s}=J(),{post:n}=v(),o=f(()=>s(n.value.author));return(r,y)=>(e(),t("dl",{class:b(["pb-10 pt-6 xl:border-b xl:border-gray-200 xl:pt-11 dark:xl:border-slate-200/5",{"xs:show xl:hidden":r.insideDoc}])},[Hs,l("dd",null,[l("ul",Ws,[o.value?(e(),t("li",Zs,[o.value.gravatar?(e(),t("img",{key:0,src:`https://gravatar.com/avatar/${o.value.gravatar}`,alt:"author image",class:"h-10 w-10 rounded-full"},null,8,Ms)):o.value.avatar?(e(),t("img",{key:1,src:o.value.avatar,alt:"author image",class:"h-10 w-10 rounded-full"},null,8,Ns)):i("",!0),l("dl",Gs,[Us,l("dd",Ys,[l("a",{href:p(u)(o.value.url),class:"text-lg text-gray-900 hover:text-[color:var(--vp-c-brand-light)] dark:text-white dark:hover:text-[color:var(--vp-c-brand-dark)]"},c(o.value.name),9,zs)]),o.value.twitter?(e(),t("dt",Qs,"Twitter")):i("",!0),o.value.twitter?(e(),t("dd",Xs,[l("a",{href:`https://twitter.com/${o.value.twitter}`,target:"_blank",rel:"noopener noreferrer"},c(o.value.twitter),9,Ks)])):i("",!0)])])):i("",!0)])])],2))}});const N=S(sn,[["__scopeId","data-v-b9d31fef"]]),nn={class:"bg-primary-100 inline-flex items-center rounded text-sm font-medium"},an=F({__name:"VPBPostDetails",props:{insideDoc:{type:Boolean}},setup(a){const{post:s}=v();return(n,o)=>(e(),t(g,null,[l("div",{class:b(["flex justify-center space-x-8 sm:space-x-12 xl:block xl:space-x-0 xl:space-y-8",{"xs:show xl:hidden":n.insideDoc}])},[l("span",nn,[d(I,{category:p(s).category},null,8,["category"])])],2),d(N,{"inside-doc":""})],64))}}),on={class:"space-y-1 pt-6 text-center xl:pb-10"},ln={class:"md:leading-14 text-3xl font-extrabold leading-9 tracking-tight text-[color:var(--vp-c-brand-dark)] dark:text-[color:var(--vp-c-brand-light)] sm:text-4xl sm:leading-10 md:text-5xl"},pn=F({__name:"VPBLayoutPostTop",setup(a){const{post:s}=v();return(n,o)=>(e(),t(g,null,[l("header",on,[d(Os),l("h1",ln,c(p(s).title),1)]),d(an,{"inside-doc":""})],64))}}),G=a=>(O("data-v-71c14132"),a=a(),H(),a),en={key:0,class:"py-3"},tn=G(()=>l("h2",{class:"text-xs uppercase tracking-wide text-gray-500 dark:text-white"}," Next Article ",-1)),rn={class:"link"},cn=["href"],yn={key:1,class:"py-3"},Fn=G(()=>l("h2",{class:"text-xs uppercase tracking-wide text-gray-500 dark:text-white"}," Previous Article ",-1)),Dn={class:"link"},Bn=["href"],An={class:"pt-3"},dn=["href"],un=F({__name:"VPBPostLinks",props:{insideDoc:{type:Boolean}},setup(a){var D;const{site:s}=h(),{nextPost:n,prevPost:o}=v(),r=s.value.themeConfig,y=u(((D=r.blog)==null?void 0:D.path)??"/blog/");return(B,A)=>(e(),t("footer",{class:b(["mb-24 divide-y divide-gray-200 text-sm font-medium leading-5 dark:divide-slate-200/5",{"xs:show lg:hidden":B.insideDoc}])},[p(n)?(e(),t("div",en,[tn,l("div",rn,[l("a",{href:`${p(n).url}`},c(p(n).title),9,cn)])])):i("",!0),p(o)?(e(),t("div",yn,[Fn,l("div",Dn,[l("a",{href:`${p(o).url}`},c(p(o).title),9,Bn)])])):i("",!0),l("div",An,[l("a",{class:"link",href:p(u)(p(y))},"← Back to the blog",8,dn)])],2))}});const U=S(un,[["__scopeId","data-v-71c14132"]]),hn=F({__name:"VPBLayoutPostBottom",setup(a){return(s,n)=>(e(),m(U,{"inside-doc":""}))}}),L=F({__name:"VPBTagIcon",props:{tag:{}},setup(a){const{theme:s}=h();return(n,o)=>{var r;return(r=p(s).blog)!=null&&r.tagIcons&&p(s).blog.tagIcons[n.tag.toLowerCase()]?(e(),t("div",{key:0,class:b([p(s).blog.tagIcons[n.tag.toLowerCase()],"mr-2"])},null,2)):i("",!0)}}}),En={class:"bg-primary-100 inline-flex items-center rounded text-sm font-medium"},mn={class:"bg-primary-100 inline-flex rounded text-sm font-medium"},_n={class:"flex flex-wrap gap-2 py-5"},gn=["href"],fn=F({__name:"VPBLayoutPostAsideTop",setup(a){var y;const{site:s}=h(),{post:n}=v(),o=s.value.themeConfig,r=u(((y=o.blog)==null?void 0:y.tagsPath)??"/blog/tags");return(D,B)=>(e(),t(g,null,[l("span",En,[d(I,{category:p(n).category},null,8,["category"])]),l("span",mn,[l("div",_n,[(e(!0),t(g,null,j(p(n).tags,A=>(e(),t("a",{key:A,class:"rounded-sm bg-gray-100 px-2 py-1 text-xs font-semibold text-gray-600",href:`${p(r)}?init=${A}`},[d(L,{tag:A},null,8,["tag"]),$(" "+c(A),1)],8,gn))),128))])]),d(N)],64))}}),vn=F({__name:"VPBLayoutPostAsideBottom",setup(a){return(s,n)=>(e(),m(U))}}),xn={class:"mb-24 divide-y divide-gray-200 text-sm font-medium leading-5 dark:divide-slate-200/5"},bn={class:"pt-3"},Cn=["href"],kn=F({__name:"VPBLayoutAuthorAsideBottom",setup(a){var r;const{site:s}=h(),n=s.value.themeConfig,o=u(((r=n.blog)==null?void 0:r.path)??"/blog/");return(y,D)=>(e(),t("footer",xn,[l("div",bn,[l("a",{class:"link",href:p(u)(p(o))},"← Back to the blog",8,Cn)])]))}});const Pn=S(kn,[["__scopeId","data-v-bda92f77"]]),$n={class:"mb-1 flex items-center justify-between text-gray-500"},wn=["src"],jn=["src"],Sn={class:"ml-4 text-4xl text-[color:var(--vp-c-brand-light)] dark:text-[color:var(--vp-c-brand-dark)]"},Vn={class:"mt-4 flex items-center justify-between text-gray-500"},Tn=["href"],qn=l("div",{class:"i-[bx/arrow-back] mr-2"},null,-1),Ln=l("span",null,"Previous Author",-1),In=[qn,Ln],Jn={key:1},Rn=["href"],On=l("span",null,"Next Author",-1),Hn=l("div",{class:"i-[bx/right-arrow-alt] ml-2"},null,-1),Wn=[On,Hn],Zn=F({__name:"VPBLayoutAuthorTop",setup(a){const{author:s,prevAuthor:n,nextAuthor:o}=J();return(r,y)=>(e(),t("div",null,[l("div",$n,[p(s).gravatar?(e(),t("img",{key:0,src:`https://gravatar.com/avatar/${p(s).gravatar}`,alt:"author image",class:"h-20 w-20 rounded-full"},null,8,wn)):p(s).avatar?(e(),t("img",{key:1,src:p(s).avatar,alt:"author image",class:"h-20 w-20 rounded-full"},null,8,jn)):i("",!0),l("span",Sn,c(p(s).name),1)]),l("div",Vn,[p(n)?(e(),t("a",{key:0,href:p(u)(p(n).url),class:"inline-flex items-center font-medium hover:text-[color:var(--vp-c-brand-dark)] dark:text-white"},In,8,Tn)):i("",!0),p(n)?i("",!0):(e(),t("div",Jn)),p(o)?(e(),t("a",{key:2,href:p(u)(p(o).url),class:"inline-flex items-center font-medium hover:text-[color:var(--vp-c-brand-dark)] dark:text-white"},Wn,8,Rn)):i("",!0)])]))}}),Mn=F({__name:"VPBLayout",setup(a){const{Layout:s}=q,{frontmatter:n}=h();return(o,r)=>(e(),m(p(s),null,{"doc-before":P(()=>[p(n).blog==="post"?(e(),m(pn,{key:0})):i("",!0),p(n).blog==="author"?(e(),m(Zn,{key:1})):i("",!0)]),"doc-footer-before":P(()=>[p(n).blog==="post"?(e(),m(hn,{key:0})):i("",!0)]),"aside-top":P(()=>[p(n).blog==="post"?(e(),m(fn,{key:0})):i("",!0)]),"aside-bottom":P(()=>[p(n).blog==="post"?(e(),m(vn,{key:0})):i("",!0),p(n).blog==="author"?(e(),m(Pn,{key:1})):i("",!0)]),_:1}))}});function Nn(){const a=[];let s="0",n=-1;for(let o=0;o<_.length;o++){const r=_[o];if(r.date){const y=r.date.raw.split("-")[0];y===s?a[n].push(r):(n++,a[n]=[],a[n].push(r),s=y)}}return{postsByYear:a}}const Gn={class:"mx-auto max-w-screen-xl px-6 lg:px-16 lg:py-16"},Un={class:"mx-auto mb-8 max-w-screen-sm text-center lg:mb-16"},Yn={class:"mb-4 text-3xl font-extrabold tracking-tight text-[color:var(--vp-c-brand-light)] dark:text-[color:var(--vp-c-brand-dark)] lg:text-4xl"},zn={class:"font-light text-[color:var(--vp-c-text-light-1)] dark:text-[color:var(--vp-c-text-dark-1)] sm:text-xl"},Qn={class:"px-0 pb-2 pt-4 text-xl font-semibold leading-6 text-[color:var(--vp-c-brand-light)] dark:text-[color:var(--vp-c-brand-dark)]"},Xn=["href"],Kn={class:"cursor-pointer leading-6"},sa=l("div",{class:"title-o"},null,-1),na={class:"cursor-pointer font-sans leading-6"},aa=F({__name:"VPBArchives",setup(a){const{postsByYear:s}=Nn(),{theme:n}=h();return(o,r)=>{var y,D;return e(),t("div",Gn,[l("div",Un,[l("h2",Yn,c((y=p(n).blog)==null?void 0:y.title)+" Archives ",1),l("p",zn,c((D=p(n).blog)==null?void 0:D.description),1)]),(e(!0),t(g,null,j(p(s),(B,A)=>(e(),t("div",{key:A},[l("div",Qn,c(B[0].date.raw.split("-")[0]),1),(e(!0),t(g,null,j(B,(C,x)=>(e(),t("a",{key:x,href:p(u)(C.url),class:"m-2 flex cursor-pointer items-center justify-between leading-6 hover:text-[color:var(--vp-c-brand-dark)] dark:hover:text-[color:var(--vp-c-brand-light)]"},[l("div",Kn,[sa,$(" "+c(C.title),1)]),l("div",na,c(C.date.raw.slice(5)),1)],8,Xn))),128))]))),128))])}}});function oa(){const a={};for(let s=0;s<_.length;s++){const n=_[s],o=n.tags;Array.isArray(o)&&o.forEach(r=>{a[r]||(a[r]=[]),a[r].push(n)})}return{postsByTag:a}}const la={class:"mx-auto max-w-screen-xl px-6 lg:px-16 lg:py-16"},pa={class:"mx-auto mb-8 max-w-screen-sm text-center lg:mb-16"},ea={class:"mb-4 text-3xl font-extrabold tracking-tight text-[color:var(--vp-c-brand-light)] dark:text-[color:var(--vp-c-brand-dark)] lg:text-4xl"},ta={class:"font-light text-[color:var(--vp-c-text-light-1)] dark:text-[color:var(--vp-c-text-dark-1)] sm:text-xl"},ra={class:"flex flex-wrap justify-center gap-2 p-4"},ca=["onClick"],ya={key:0},ia={class:"px-0 pb-2 pt-4 text-xl font-semibold leading-6 text-[color:var(--vp-c-brand-light)] dark:text-[color:var(--vp-c-brand-dark)]"},Fa={class:"text-xs"},Da=["href"],Ba={class:"cursor-pointer leading-6"},Aa=l("div",{class:"title-o"},null,-1),da={class:"cursor-pointer font-sans leading-6"},ua=F({__name:"VPBTags",setup(a){const{postsByTag:s}=oa(),{theme:n}=h(),o=z("");function r(y){o.value=y}if(V){const D=new URLSearchParams(window.location.search).get("init");D&&r(D)}return(y,D)=>{const B=Q("ClientOnly");return e(),m(B,null,{default:P(()=>{var A,C;return[l("div",la,[l("div",pa,[l("h2",ea,c((A=p(n).blog)==null?void 0:A.title)+" Tags ",1),l("p",ta,c((C=p(n).blog)==null?void 0:C.description),1)]),l("div",ra,[(e(!0),t(g,null,j(p(s),(x,E)=>(e(),t("div",{key:E,class:b({"cursor-pointer rounded-full bg-gray-100 px-3 py-1 text-sm font-semibold text-gray-600":o.value!==E,"rounded-full bg-[color:var(--vp-c-brand-light)] px-3 py-1 text-sm font-semibold text-gray-100 dark:bg-[color:var(--vp-c-brand-dark)]":o.value===E}),onClick:Pa=>r(E)},[d(L,{tag:E},null,8,["tag"]),$(" "+c(E)+" ",1),l("span",{class:b({"ml-3 text-[color:var(--vp-c-brand-light)] dark:text-[color:var(--vp-c-brand-dark)]":o.value!==E,"ml-3 text-[color:var(--vp-c-brand-dark)] dark:text-[color:var(--vp-c-brand-light)]":o.value===E})},c(x.length),3)],10,ca))),128))]),o.value?(e(),t("div",ya,[l("div",ia,[d(L,{tag:o.value},null,8,["tag"]),$(c(o.value)+" ",1),l("span",Fa," ( "+c(p(s)[o.value].length)+" )",1)]),(e(!0),t(g,null,j(p(s)[o.value],(x,E)=>(e(),t("a",{key:E,href:p(u)(x.url),class:"m-2 flex cursor-pointer items-center justify-between leading-6"},[l("div",Ba,[Aa,$(" "+c(x.title),1)]),l("div",da,c(x.date.raw),1)],8,Da))),128))])):i("",!0)])]}),_:1})}}}),ha={},Ea={class:"theme-style-div"};function ma(a,s){return e(),t("div",Ea,"This is a test theme component")}const _a=S(ha,[["render",ma]]),T={...q,Layout:Mn,enhanceApp({app:a,router:s,siteData:n}){q.enhanceApp({app:a,router:s,siteData:n}),a.component("VPBHome",Ls),a.component("VPBArchives",aa),a.component("VPBTags",ua),a.component("VPBTestComponent",_a),a.component("VPBHomePost",Z)}};const ga={class:"w-full text-blue-200"},fa=F({__name:"CustomBlogHeader",setup(a){const s=v();return(n,o)=>(e(),t("div",ga," Newest Content: "+c(p(s).posts[0].title),1))}}),va={...T,Layout:()=>W(T.Layout,null,{}),enhanceApp({app:a,router:s,siteData:n}){T.enhanceApp({app:a,router:s,siteData:n}),a.component("CustomBlogHeader",fa)}};function Y(a){if(a.extends){const s=Y(a.extends);return{...s,...a,async enhanceApp(n){s.enhanceApp&&await s.enhanceApp(n),a.enhanceApp&&await a.enhanceApp(n)}}}return a}const w=Y(va),xa=F({name:"VitePressApp",setup(){const{site:a}=h();return cs(()=>{ys(()=>{document.documentElement.lang=a.value.lang,document.documentElement.dir=a.value.dir})}),is(),Fs(),Ds(),w.setup&&w.setup(),()=>W(w.Layout)}});async function ba(){const a=ka(),s=Ca();s.provide(K,a);const n=ss(a.route);return s.provide(ns,n),s.component("Content",as),s.component("ClientOnly",os),Object.defineProperties(s.config.globalProperties,{$frontmatter:{get(){return n.frontmatter.value}},$params:{get(){return n.page.value.params}}}),w.enhanceApp&&await w.enhanceApp({app:s,router:a,siteData:ls}),{app:s,router:a,data:n}}function Ca(){return ps(xa)}function ka(){let a=V,s;return es(n=>{let o=ts(n);return a&&(s=o),(a||s===o)&&(o=o.replace(/\.js$/,".lean.js")),V&&(a=!1),rs(()=>import(o),[])},w.NotFound)}V&&ba().then(({app:a,router:s,data:n})=>{s.go().then(()=>{X(s.route,n.site),a.mount("#app")})});export{ba as createApp};
