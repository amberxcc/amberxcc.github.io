<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title></title>
        <link>localhost/blog</link>
        <description></description>
        <lastBuildDate>Sat, 16 Dec 2023 13:44:11 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[JavaScript 函数式编程]]></title>
            <link>localhost/blog/blog/posts/JavaScript-fp.html</link>
            <guid>localhost/blog/blog/posts/JavaScript-fp.html</guid>
            <pubDate>Sun, 11 Dec 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[<p>函数式编程思想是一种对运算过程的抽象，这里的函数是指数学意义上映射关系（如<em>y=sin(x)</em>），也称为纯函数，而编程语言定义的函数除了运算，往往带有副作用，如 IO 操作、影响外部变量等。</p>
<nav class="table-of-contents"><ul><li><a href="#_1-函数式编程基础">1. 函数式编程基础</a><ul><li><a href="#_1-1-函数是一等公民">1.1 函数是一等公民</a></li><li><a href="#_1-2-高阶函数">1.2 高阶函数</a></li></ul></li></ul></nav>
<h2 id="_1-函数式编程基础" tabindex="-1">1. 函数式编程基础 <a class="header-anchor" href="#_1-函数式编程基础" aria-label="Permalink to &quot;1. 函数式编程基础&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="_1-1-函数是一等公民" tabindex="-1">1.1 函数是一等公民 <a class="header-anchor" href="#_1-1-函数是一等公民" aria-label="Permalink to &quot;1.1 函数是一等公民&quot;">&ZeroWidthSpace;</a></h3>
<p>函数只是一个特殊的对象，可以用变量表示（函数是一等公民）</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">function</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">add</span><span style="color: #89DDFF">(</span><span style="color: #BABED8; font-style: italic">x</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">y</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #BABED8">x</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #BABED8">y</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #BABED8"> sum </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> add</span></span>
<span class="line"><span style="color: #82AAFF">sum</span><span style="color: #BABED8">(</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">2</span><span style="color: #BABED8">) </span><span style="color: #676E95; font-style: italic">// 3</span></span></code></pre>
</div><h3 id="_1-2-高阶函数" tabindex="-1">1.2 高阶函数 <a class="header-anchor" href="#_1-2-高阶函数" aria-label="Permalink to &quot;1.2 高阶函数&quot;">&ZeroWidthSpace;</a></h3>
<ul>
<li>函数可以作为参数</li>
<li>函数可以作为返回值</li>
</ul>
<p>函数作为参数，模拟实现 forEach 函数：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">function</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">myForEach</span><span style="color: #89DDFF">(</span><span style="color: #BABED8; font-style: italic">array</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">f</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #F07178"> (</span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #BABED8">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #BABED8">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178"> </span><span style="color: #BABED8">array</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">length</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #BABED8">i</span><span style="color: #89DDFF">++</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">f</span><span style="color: #F07178">(</span><span style="color: #BABED8">array</span><span style="color: #F07178">[</span><span style="color: #BABED8">i</span><span style="color: #F07178">])</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #82AAFF">myForEach</span><span style="color: #BABED8">([</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">2</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">3</span><span style="color: #BABED8">]</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #BABED8; font-style: italic">itemÏ</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #BABED8">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #BABED8">item</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #BABED8">)</span></span></code></pre>
</div><p>函数作为返回值，封装一个 once 函数，生成一个只能执行一次的函数：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">function</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">once</span><span style="color: #89DDFF">(</span><span style="color: #BABED8; font-style: italic">fn</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #BABED8">done</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #FF9CAC">false</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">(...</span><span style="color: #BABED8; font-style: italic">args</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">!</span><span style="color: #BABED8">done</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #BABED8">done</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #FF9CAC">true</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #82AAFF">fn</span><span style="color: #F07178">(</span><span style="color: #89DDFF">...</span><span style="color: #BABED8">args</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #BABED8"> pay </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">once</span><span style="color: #BABED8">(</span><span style="color: #C792EA">function</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #BABED8; font-style: italic">money</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #BABED8">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #89DDFF">`</span><span style="color: #C3E88D">消费了</span><span style="color: #89DDFF">${</span><span style="color: #BABED8">money</span><span style="color: #89DDFF">}</span><span style="color: #C3E88D">元</span><span style="color: #89DDFF">`</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #BABED8">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #82AAFF">pay</span><span style="color: #BABED8">(</span><span style="color: #F78C6C">5</span><span style="color: #BABED8">)</span></span>
<span class="line"><span style="color: #82AAFF">pay</span><span style="color: #BABED8">(</span><span style="color: #F78C6C">5</span><span style="color: #BABED8">)</span></span>
<span class="line"><span style="color: #82AAFF">pay</span><span style="color: #BABED8">(</span><span style="color: #F78C6C">5</span><span style="color: #BABED8">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #676E95; font-style: italic">//</span></span></code></pre>
</div>]]></description>
            <content:encoded><![CDATA[<p>函数式编程思想是一种对运算过程的抽象，这里的函数是指数学意义上映射关系（如<em>y=sin(x)</em>），也称为纯函数，而编程语言定义的函数除了运算，往往带有副作用，如 IO 操作、影响外部变量等。</p>
<nav class="table-of-contents"><ul><li><a href="#_1-函数式编程基础">1. 函数式编程基础</a><ul><li><a href="#_1-1-函数是一等公民">1.1 函数是一等公民</a></li><li><a href="#_1-2-高阶函数">1.2 高阶函数</a></li><li><a href="#_1-3-闭包">1.3 闭包</a></li></ul></li><li><a href="#_2-函数式编程核心">2. 函数式编程核心</a><ul><li><a href="#_2-1-纯函数">2.1 纯函数</a></li><li><a href="#_2-2-副作用">2.2 副作用</a></li><li><a href="#_2-3-柯里化">2.3 柯里化</a></li><li><a href="#_2-4-函数组合">2.4 函数组合</a></li></ul></li></ul></nav>
<h2 id="_1-函数式编程基础" tabindex="-1">1. 函数式编程基础 <a class="header-anchor" href="#_1-函数式编程基础" aria-label="Permalink to &quot;1. 函数式编程基础&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="_1-1-函数是一等公民" tabindex="-1">1.1 函数是一等公民 <a class="header-anchor" href="#_1-1-函数是一等公民" aria-label="Permalink to &quot;1.1 函数是一等公民&quot;">&ZeroWidthSpace;</a></h3>
<p>函数只是一个特殊的对象，可以用变量表示（函数是一等公民）</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">function</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">add</span><span style="color: #89DDFF">(</span><span style="color: #BABED8; font-style: italic">x</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">y</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #BABED8">x</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #BABED8">y</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #BABED8"> sum </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> add</span></span>
<span class="line"><span style="color: #82AAFF">sum</span><span style="color: #BABED8">(</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">2</span><span style="color: #BABED8">) </span><span style="color: #676E95; font-style: italic">// 3</span></span></code></pre>
</div><h3 id="_1-2-高阶函数" tabindex="-1">1.2 高阶函数 <a class="header-anchor" href="#_1-2-高阶函数" aria-label="Permalink to &quot;1.2 高阶函数&quot;">&ZeroWidthSpace;</a></h3>
<ul>
<li>函数可以作为参数</li>
<li>函数可以作为返回值</li>
</ul>
<p>函数作为参数，模拟实现 forEach 函数：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">function</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">myForEach</span><span style="color: #89DDFF">(</span><span style="color: #BABED8; font-style: italic">array</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">f</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #F07178"> (</span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #BABED8">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #BABED8">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178"> </span><span style="color: #BABED8">array</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">length</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #BABED8">i</span><span style="color: #89DDFF">++</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">f</span><span style="color: #F07178">(</span><span style="color: #BABED8">array</span><span style="color: #F07178">[</span><span style="color: #BABED8">i</span><span style="color: #F07178">])</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #82AAFF">myForEach</span><span style="color: #BABED8">([</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">2</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">3</span><span style="color: #BABED8">]</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #BABED8; font-style: italic">itemÏ</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #BABED8">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #BABED8">item</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #BABED8">)</span></span></code></pre>
</div><p>函数作为返回值，封装一个 once 函数，生成一个只能执行一次的函数：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">function</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">once</span><span style="color: #89DDFF">(</span><span style="color: #BABED8; font-style: italic">fn</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #BABED8">done</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #FF9CAC">false</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">(...</span><span style="color: #BABED8; font-style: italic">args</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">!</span><span style="color: #BABED8">done</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #BABED8">done</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #FF9CAC">true</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #82AAFF">fn</span><span style="color: #F07178">(</span><span style="color: #89DDFF">...</span><span style="color: #BABED8">args</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #BABED8"> pay </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">once</span><span style="color: #BABED8">(</span><span style="color: #C792EA">function</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #BABED8; font-style: italic">money</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #BABED8">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #89DDFF">`</span><span style="color: #C3E88D">消费了</span><span style="color: #89DDFF">${</span><span style="color: #BABED8">money</span><span style="color: #89DDFF">}</span><span style="color: #C3E88D">元</span><span style="color: #89DDFF">`</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #BABED8">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #82AAFF">pay</span><span style="color: #BABED8">(</span><span style="color: #F78C6C">5</span><span style="color: #BABED8">)</span></span>
<span class="line"><span style="color: #82AAFF">pay</span><span style="color: #BABED8">(</span><span style="color: #F78C6C">5</span><span style="color: #BABED8">)</span></span>
<span class="line"><span style="color: #82AAFF">pay</span><span style="color: #BABED8">(</span><span style="color: #F78C6C">5</span><span style="color: #BABED8">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #676E95; font-style: italic">// ---</span></span>
<span class="line"><span style="color: #BABED8">消费了5元</span></span></code></pre>
</div><p>数组的方法中有很多高阶函数，如 map、reduce、filter、every、some 等，以下为模拟实现：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #BABED8"> map </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #BABED8; font-style: italic">arr</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">fn</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #BABED8">temp</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> []</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #F07178"> (</span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #BABED8">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">of</span><span style="color: #F07178"> </span><span style="color: #BABED8">arr</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #BABED8">temp</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">push</span><span style="color: #F07178">(</span><span style="color: #82AAFF">fn</span><span style="color: #F07178">(</span><span style="color: #BABED8">i</span><span style="color: #F07178">))</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #BABED8">temp</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #BABED8"> every </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #BABED8; font-style: italic">arr</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">f</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #BABED8">result</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #FF9CAC">true</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #F07178"> (</span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #BABED8">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">of</span><span style="color: #F07178"> </span><span style="color: #BABED8">arr</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #BABED8">result</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">f</span><span style="color: #F07178">(</span><span style="color: #BABED8">i</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">!</span><span style="color: #BABED8">result</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">break</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #BABED8">result</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><p>💡 高阶函数的意义：把函数进一步封装抽象、屏蔽细节，只关注结果</p>
<h3 id="_1-3-闭包" tabindex="-1">1.3 闭包 <a class="header-anchor" href="#_1-3-闭包" aria-label="Permalink to &quot;1.3 闭包&quot;">&ZeroWidthSpace;</a></h3>
<p>闭包：通常，闭包是指使用一个特殊的属性  <code>[[Environment]]</code>  来记录函数自身的创建时的环境的函数。它具体指向了函数创建时的词法环境。</p>
<div class="info custom-block"><p class="custom-block-title">INFO</p>
<p>闭包的本质：函数在执行时会放到一个执行栈上，函数执行完从栈中移除。但是当作用域成员被外部引用则不能释放，因此内部函数依然可以访问外部函数成员。</p>
</div>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">// 示例一</span></span>
<span class="line"><span style="color: #C792EA">function</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">makefn</span><span style="color: #89DDFF">()</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #BABED8">msg</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">hello</span><span style="color: #89DDFF">&quot;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #C792EA">function</span><span style="color: #F07178"> </span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #BABED8">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #BABED8">msg</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #BABED8"> fn </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">makefn</span><span style="color: #BABED8">()</span></span>
<span class="line"><span style="color: #82AAFF">fn</span><span style="color: #BABED8">() </span><span style="color: #676E95; font-style: italic">// hello</span></span></code></pre>
</div><h2 id="_2-函数式编程核心" tabindex="-1">2. 函数式编程核心 <a class="header-anchor" href="#_2-函数式编程核心" aria-label="Permalink to &quot;2. 函数式编程核心&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="_2-1-纯函数" tabindex="-1">2.1 纯函数 <a class="header-anchor" href="#_2-1-纯函数" aria-label="Permalink to &quot;2.1 纯函数&quot;">&ZeroWidthSpace;</a></h3>
<p>纯函数即数学意义上的函数，表示的是一种映射关系，相同输入永远得到相同输出，没有副作用。</p>
<p>纯函数示例：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #BABED8"> list </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> [</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">2</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">3</span><span style="color: #BABED8">]</span></span>
<span class="line"></span>
<span class="line"><span style="color: #676E95; font-style: italic">// slice方法是纯函数，不会改变list的值，即没有副作用</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #BABED8"> l1 </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> list</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">slice</span><span style="color: #BABED8">(</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">2</span><span style="color: #BABED8">)</span></span>
<span class="line"><span style="color: #BABED8">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #BABED8">(list</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> l1) </span><span style="color: #676E95; font-style: italic">// [ 1, 2, 3 ] [ 2 ]</span></span>
<span class="line"></span>
<span class="line"><span style="color: #676E95; font-style: italic">// splice方法不是纯函数，会原地改变原list的值，即产生了副作用</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #BABED8"> l2 </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> list</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">splice</span><span style="color: #BABED8">(</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">1</span><span style="color: #BABED8">)</span></span>
<span class="line"><span style="color: #BABED8">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #BABED8">(list</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> l2) </span><span style="color: #676E95; font-style: italic">// [ 1, 3 ] [ 2 ]</span></span></code></pre>
</div><p>💡 lodash 是一个纯函数库，封装了对常用数据类型的操作方法，有的副作用，有的没有。</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #BABED8"> _ </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">require</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">lodash</span><span style="color: #89DDFF">&quot;</span><span style="color: #BABED8">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #BABED8"> l </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> [</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">2</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">3</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">4</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">5</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">A</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">b</span><span style="color: #89DDFF">&quot;</span><span style="color: #BABED8">]</span></span>
<span class="line"></span>
<span class="line"><span style="color: #BABED8">_</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">first</span><span style="color: #BABED8">(l)</span></span>
<span class="line"><span style="color: #BABED8">_</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">last</span><span style="color: #BABED8">(l)</span></span>
<span class="line"><span style="color: #BABED8">_</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">reverse</span><span style="color: #BABED8">(l) </span><span style="color: #676E95; font-style: italic">// 有副作用</span></span></code></pre>
</div><p><strong>纯函数的好处：</strong></p>
<ul>
<li>可缓存</li>
<li>可测试</li>
<li>方便并行处理</li>
</ul>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">// 缓存纯函数的值，可以避免重复计算，提高性能</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #BABED8"> _ </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">require</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">lodash</span><span style="color: #89DDFF">&quot;</span><span style="color: #BABED8">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #BABED8"> add </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #BABED8; font-style: italic">x</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">y</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #BABED8">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">==&gt;&gt;</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #BABED8">x</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #BABED8">y</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #BABED8">x</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #BABED8">y</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #BABED8"> addWithMemory </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> _</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">memoize</span><span style="color: #BABED8">(add)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #BABED8">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #BABED8">(</span><span style="color: #82AAFF">add</span><span style="color: #BABED8">(</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">2</span><span style="color: #BABED8">))</span></span>
<span class="line"><span style="color: #BABED8">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #BABED8">(</span><span style="color: #82AAFF">add</span><span style="color: #BABED8">(</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">2</span><span style="color: #BABED8">))</span></span>
<span class="line"></span>
<span class="line"><span style="color: #BABED8">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #BABED8">(</span><span style="color: #82AAFF">addWithMemory</span><span style="color: #BABED8">(</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">2</span><span style="color: #BABED8">))</span></span>
<span class="line"><span style="color: #BABED8">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #BABED8">(</span><span style="color: #82AAFF">addWithMemory</span><span style="color: #BABED8">(</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">2</span><span style="color: #BABED8">))</span></span></code></pre>
</div><h3 id="_2-2-副作用" tabindex="-1">2.2 副作用 <a class="header-anchor" href="#_2-2-副作用" aria-label="Permalink to &quot;2.2 副作用&quot;">&ZeroWidthSpace;</a></h3>
<p>纯函数根据相同的输入会永远的到相同的输出，如果函数依赖于外部状态就无法保证相同输出，即带来副作用：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">let</span><span style="color: #BABED8"> threshold </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">18</span></span>
<span class="line"></span>
<span class="line"><span style="color: #676E95; font-style: italic">// 不是纯函数，依赖外部状态，如果外部变量改变，相同输入可能会得到不同输出</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #BABED8"> ifAdult </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #BABED8; font-style: italic">age</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #BABED8"> age </span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8"> threshold</span></span>
<span class="line"></span>
<span class="line"><span style="color: #676E95; font-style: italic">// 纯函数，不依赖外部，相同输入始终到相同输出</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #BABED8"> ifAdult2 </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #BABED8; font-style: italic">age</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #BABED8">threshold</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #F78C6C">18</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #BABED8">age</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&gt;</span><span style="color: #F07178"> </span><span style="color: #BABED8">threshold</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><aside>
💡 所有与函数外的交互都可能产生副作用，但副作用不可能完全禁止，只能尽可能的将其限制在可控范围内。
</aside>
<h3 id="_2-3-柯里化" tabindex="-1">2.3 柯里化 <a class="header-anchor" href="#_2-3-柯里化" aria-label="Permalink to &quot;2.3 柯里化&quot;">&ZeroWidthSpace;</a></h3>
<hr>
<p>先看示例：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #BABED8"> _ </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">require</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">lodash</span><span style="color: #89DDFF">&quot;</span><span style="color: #BABED8">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #BABED8">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #BABED8">(Math</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">pow</span><span style="color: #BABED8">(</span><span style="color: #F78C6C">2</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">2</span><span style="color: #BABED8">))</span></span>
<span class="line"><span style="color: #BABED8">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #BABED8">(Math</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">pow</span><span style="color: #BABED8">(</span><span style="color: #F78C6C">2</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">3</span><span style="color: #BABED8">))</span></span>
<span class="line"><span style="color: #BABED8">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #BABED8">(Math</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">pow</span><span style="color: #BABED8">(</span><span style="color: #F78C6C">3</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">3</span><span style="color: #BABED8">))</span></span>
<span class="line"></span>
<span class="line"><span style="color: #676E95; font-style: italic">// 手动柯里化</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #BABED8"> getPower </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #BABED8; font-style: italic">power</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #BABED8; font-style: italic">number</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #BABED8"> Math</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">pow</span><span style="color: #BABED8">(number</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> power)</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #BABED8"> power2 </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">getPower</span><span style="color: #BABED8">(</span><span style="color: #F78C6C">2</span><span style="color: #BABED8">) </span><span style="color: #676E95; font-style: italic">// 得到一个专门求平方的函数</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #BABED8"> power3 </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">getPower</span><span style="color: #BABED8">(</span><span style="color: #F78C6C">3</span><span style="color: #BABED8">) </span><span style="color: #676E95; font-style: italic">// 得到一个专门求立方的函数</span></span>
<span class="line"></span>
<span class="line"><span style="color: #BABED8">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #BABED8">(</span><span style="color: #82AAFF">power2</span><span style="color: #BABED8">(</span><span style="color: #F78C6C">2</span><span style="color: #BABED8">))</span></span>
<span class="line"><span style="color: #BABED8">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #BABED8">(</span><span style="color: #82AAFF">power2</span><span style="color: #BABED8">(</span><span style="color: #F78C6C">3</span><span style="color: #BABED8">))</span></span>
<span class="line"><span style="color: #BABED8">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #BABED8">(</span><span style="color: #82AAFF">power3</span><span style="color: #BABED8">(</span><span style="color: #F78C6C">3</span><span style="color: #BABED8">))</span></span></code></pre>
</div><p><strong>什么是柯里化？</strong></p>
<blockquote>
<p>柯里化是 lambda 演算中的一个概念，但不要被它吓到，它很容易实现。柯里化是一个函数，它一次接受一个参数并返回一个期待下一个参数的新函数。它是一种函数转换，将函数从 f(a, b, c) 的可调用函数转换为 f(a)(b)(c) 的可调用函数。</p>
</blockquote>
<p><strong>javascript 中的柯里化是什么？</strong></p>
<blockquote>
<p>柯里化只是意味着评估具有多个参数的函数，并将它们分解为具有单个参数的函数序列。柯里化是当一个函数不是一次接受所有参数，而是接受第一个参数并返回一个新函数，该函数接受第二个参数并又返回一个新函数，该函数接受第三个参数，依此类推，直到所有论证完毕。</p>
</blockquote>
<p><strong>为什么要使用柯里化？</strong></p>
<ul>
<li>避免一次又一次地传递相同的变量</li>
<li>将您功能划分为多个更细粒度的函数，这些函数可以处理某一项职责。使功能更加纯净，不易出错和产生副作用。</li>
<li>在函数式编程中用于创建高阶函数。</li>
</ul>
<p><strong>如何实现柯里化？</strong></p>
<p>先看看 lodash 实现的的通用柯里化方法：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #BABED8"> _ </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">require</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">lodash</span><span style="color: #89DDFF">&quot;</span><span style="color: #BABED8">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #BABED8"> threeSum </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #BABED8; font-style: italic">a</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">b</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">c</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #BABED8"> a </span><span style="color: #89DDFF">+</span><span style="color: #BABED8"> b </span><span style="color: #89DDFF">+</span><span style="color: #BABED8"> c</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #BABED8"> getSum </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> _</span><span style="color: #89DDFF">.**</span><span style="color: #BABED8">curry</span><span style="color: #89DDFF">**</span><span style="color: #BABED8">(threeSum)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #BABED8">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #BABED8">(</span><span style="color: #82AAFF">getSum</span><span style="color: #BABED8">(</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">2</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">3</span><span style="color: #BABED8">)) </span><span style="color: #676E95; font-style: italic">//6 ，实参与形参个数相同时直接返回结果</span></span>
<span class="line"><span style="color: #BABED8">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #BABED8">(</span><span style="color: #82AAFF">getSum</span><span style="color: #BABED8">(</span><span style="color: #F78C6C">1</span><span style="color: #BABED8">)(</span><span style="color: #F78C6C">2</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">3</span><span style="color: #BABED8">)) </span><span style="color: #676E95; font-style: italic">//6 ，实参与形参个数不同时返回一个函数</span></span>
<span class="line"><span style="color: #BABED8">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #BABED8">(</span><span style="color: #82AAFF">getSum</span><span style="color: #BABED8">(</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">2</span><span style="color: #BABED8">)(</span><span style="color: #F78C6C">3</span><span style="color: #BABED8">)) </span><span style="color: #676E95; font-style: italic">//6</span></span></code></pre>
</div><p>模拟实现 lodash 的 curry 方法：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #BABED8"> curry </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #BABED8; font-style: italic">f</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">(...</span><span style="color: #BABED8; font-style: italic">args1</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #BABED8">args1</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">length</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #BABED8">f</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">length</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">      </span><span style="color: #676E95; font-style: italic">// 使用f.length可以获取原函数f的形参个数！</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #82AAFF">f</span><span style="color: #F07178">(</span><span style="color: #89DDFF">...</span><span style="color: #BABED8">args1</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">(...</span><span style="color: #BABED8; font-style: italic">args2</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #82AAFF">f</span><span style="color: #F07178">(</span><span style="color: #89DDFF">...</span><span style="color: #F07178">[</span><span style="color: #89DDFF">...</span><span style="color: #BABED8">args1</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #89DDFF">...</span><span style="color: #BABED8">args2</span><span style="color: #F07178">])</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #676E95; font-style: italic">// 进一步简化（没必要，可读性差）</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #BABED8"> curry2 </span><span style="color: #89DDFF">=</span></span>
<span class="line"><span style="color: #BABED8">  </span><span style="color: #89DDFF">(</span><span style="color: #BABED8; font-style: italic">f</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #C792EA">=&gt;</span></span>
<span class="line"><span style="color: #BABED8">  </span><span style="color: #89DDFF">(...</span><span style="color: #BABED8; font-style: italic">args1</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #C792EA">=&gt;</span></span>
<span class="line"><span style="color: #BABED8">    args1</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">length </span><span style="color: #89DDFF">===</span><span style="color: #BABED8"> f</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">length </span><span style="color: #89DDFF">?</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">f</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">...</span><span style="color: #BABED8">args1) </span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(...</span><span style="color: #BABED8; font-style: italic">args2</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">f</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">...</span><span style="color: #BABED8">[</span><span style="color: #89DDFF">...</span><span style="color: #BABED8">args1</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">...</span><span style="color: #BABED8">args2])</span></span></code></pre>
</div><h3 id="_2-4-函数组合" tabindex="-1">2.4 函数组合 <a class="header-anchor" href="#_2-4-函数组合" aria-label="Permalink to &quot;2.4 函数组合&quot;">&ZeroWidthSpace;</a></h3>
<hr>
<p>函数组合可以把细粒度的函数重新组合成一个新函数</p>
<p>示例：将<code>”NEVER SAY NEVER”</code> 类型的字符串转换为 <code>“never-say-never”</code>形式</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #BABED8"> s </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">NEVER SAY NEVER</span><span style="color: #89DDFF">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #BABED8"> temp1 </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> _</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">split</span><span style="color: #BABED8">(s</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #BABED8">)</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #BABED8"> temp2 </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> _</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">map</span><span style="color: #BABED8">(l1</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #BABED8; font-style: italic">i</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #BABED8"> i</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">toLowerCase</span><span style="color: #BABED8">())</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #BABED8"> result </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> _</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">join</span><span style="color: #BABED8">(l2</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">-</span><span style="color: #89DDFF">&quot;</span><span style="color: #BABED8">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #BABED8">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #BABED8">(s</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> temp1</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> temp2</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> result)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #676E95; font-style: italic">// 1.直接嵌套调用</span></span>
<span class="line"><span style="color: #BABED8">_</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">join</span><span style="color: #BABED8">(</span></span>
<span class="line"><span style="color: #BABED8">  _</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">map</span><span style="color: #BABED8">(_</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">split</span><span style="color: #BABED8">(s</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #BABED8">)</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #BABED8; font-style: italic">i</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #BABED8"> i</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">toLowerCase</span><span style="color: #BABED8">())</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #BABED8">  </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">-</span><span style="color: #89DDFF">&quot;</span></span>
<span class="line"><span style="color: #BABED8">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #676E95; font-style: italic">// 2.使用lodash通用方法组合函数</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #BABED8"> f1 </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #BABED8; font-style: italic">tag</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #BABED8; font-style: italic">s</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #BABED8"> _</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">split</span><span style="color: #BABED8">(s</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> tag)</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #BABED8"> f2 </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #BABED8; font-style: italic">fn</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #BABED8; font-style: italic">list</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #BABED8"> _</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">map</span><span style="color: #BABED8">(list</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> fn)</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #BABED8"> f3 </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #BABED8; font-style: italic">tag</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #BABED8; font-style: italic">list</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #BABED8"> _</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">join</span><span style="color: #BABED8">(list</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> tag)</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #BABED8"> f </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> _</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">flow</span><span style="color: #BABED8">(</span></span>
<span class="line"><span style="color: #BABED8">  </span><span style="color: #82AAFF">f1</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #BABED8">)</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #BABED8">  </span><span style="color: #82AAFF">f2</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">(</span><span style="color: #BABED8; font-style: italic">i</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #BABED8"> i</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">toLowerCase</span><span style="color: #BABED8">())</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #BABED8">  </span><span style="color: #82AAFF">f3</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">-</span><span style="color: #89DDFF">&quot;</span><span style="color: #BABED8">)</span></span>
<span class="line"><span style="color: #BABED8">)</span></span>
<span class="line"><span style="color: #82AAFF">f</span><span style="color: #BABED8">(s)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #676E95; font-style: italic">// 模拟实现lodash中的flow组合函数</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #BABED8"> compose </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(...</span><span style="color: #BABED8; font-style: italic">args</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">(</span><span style="color: #BABED8; font-style: italic">value</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #BABED8">args</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">reduce</span><span style="color: #F07178">(</span><span style="color: #89DDFF">(</span><span style="color: #BABED8; font-style: italic">preValue</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #BABED8; font-style: italic">currentFn</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #82AAFF">currentFn</span><span style="color: #F07178">(</span><span style="color: #BABED8">preValue</span><span style="color: #F07178">)</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #BABED8">value</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #BABED8">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #BABED8">(</span><span style="color: #82AAFF">compose</span><span style="color: #BABED8">(filterListNumber</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> getListSum)(l))</span></span></code></pre>
</div><p>上述案例中，使用 lodash 提供的函数没有被柯里化，无法直接进行组合，需要手动柯里化封装才能组合使用。而 <code>lodash/fp</code> 模块提供已经柯里化的方法，可以直接组合，方便函数式编程：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #BABED8"> fp </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">require</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">lodash/fp</span><span style="color: #89DDFF">&quot;</span><span style="color: #BABED8">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #BABED8"> s </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">NEVER SAY NEVER</span><span style="color: #89DDFF">&quot;</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #BABED8"> f </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> fp</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">flow</span><span style="color: #BABED8">(</span></span>
<span class="line"><span style="color: #BABED8">  fp</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">split</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #BABED8">)</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #BABED8">  fp</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">map</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">(</span><span style="color: #BABED8; font-style: italic">i</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #BABED8"> i</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">toLowerCase</span><span style="color: #BABED8">())</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #BABED8">  fp</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">join</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">-</span><span style="color: #89DDFF">&quot;</span><span style="color: #BABED8">)</span></span>
<span class="line"><span style="color: #BABED8">)</span></span>
<span class="line"><span style="color: #82AAFF">f</span><span style="color: #BABED8">(s)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #676E95; font-style: italic">// 更复杂的组合如下：</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #BABED8"> fn </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> fp</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">flow</span><span style="color: #BABED8">(fp</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">join</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">. </span><span style="color: #89DDFF">&quot;</span><span style="color: #BABED8">)</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> fp</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">map</span><span style="color: #BABED8">(fp</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">flow</span><span style="color: #BABED8">(fp</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">first</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> fp</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">toUpper))</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> fp</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">split</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #BABED8">))</span></span></code></pre>
</div><aside>
💡 组合函数的调试：如果需要调试函数组合的中间结果，可以加一层打印中间结果。
</aside>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #BABED8"> logger </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> _</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">curry</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">(</span><span style="color: #BABED8; font-style: italic">tag</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">value</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #BABED8">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #BABED8">tag</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #BABED8">value</span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #BABED8">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #BABED8"> f </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">compose</span><span style="color: #BABED8">(f1</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">logger</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">f1执行后：</span><span style="color: #89DDFF">&quot;</span><span style="color: #BABED8">)</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> f2</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">logger</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">f2执行后：</span><span style="color: #89DDFF">&quot;</span><span style="color: #BABED8">)</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> f3)</span></span></code></pre>
</div><br/>
<p><strong>参考文档</strong></p>
<ol>
<li><a href="https://blog.logrocket.com/understanding-javascript-currying/" target="_blank" rel="noreferrer">Understanding JavaScript currying - LogRocket Blog</a></li>
</ol>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[JavaScript 异步编程]]></title>
            <link>localhost/blog/blog/posts/JavaScript-asyc.html</link>
            <guid>localhost/blog/blog/posts/JavaScript-asyc.html</guid>
            <pubDate>Thu, 01 Dec 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[<p>JavaScript的一个核心特性是单线程执行，这里的单线程是指代码的执行是单线程的（宿主环境的API可以多线程），其最初的目的是为了避免多线程的DOM操作可能带来的错乱。优点是更安全简单，缺点是当遇到一个耗时任务时，后面的任务会被阻塞，从而拖延整个程序的执行。</p>
<p>为了解决耗时任务阻塞线程的问题，JavaScript将任务的执行模式分为了同步模式和异步模式，运行环境也提供了以同步或者异步模式运行的API。</p>
<ul>
<li><strong>同步模式</strong>: 任务排队执行，执行过程容易理解。</li>
<li><strong>异步模式</strong>: 对于耗时操作，开启过后就立即往后执行下一个任务，异步后续的逻辑一般通过回调函数的方式定义，在耗时任务执行过后就会自动执行传入的回调函数。</li>
</ul>
<img src="/2023/promise0.png" width="80%" style="margin: 1% 10% 1% 10%;"/>
<p>JavaScript引擎会先执行完调用栈中的任务，然后通过事件循环从“消息队列”中再取一个出来执行，在此过程中，可以随时再往消息队列中添加任务。也正是因为大量的异步模式的API导致代码一些复杂的异步逻辑不易阅读。</p>
<nav class="table-of-contents"><ul><li><a href="#_1-回调函数">1. 回调函数</a></li><li><a href="#_2-promise">2. Promise</a><ul><li><a href="#_2-1-promise-的基本用法">2.1 Promise 的基本用法</a></li><li><a href="#_2-2-promise-封装一个异步任务函数">2.2 Promise 封装一个异步任务函数</a></li><li><a href="#_2-3-promise-的链式调用">2.3 Promise 的链式调用</a></li><li><a href="#_2-4-promise-的异常处理">2.4 Promise 的异常处理</a></li><li><a href="#_2-5-promise-的静态方法">2.5 Promise 的静态方法</a></li><li><a href="#_2-6-promise-并行执行">2.6 Promise 并行执行</a></li><li><a href="#_2-7-promise-的执行时序-宏任务-微任务">2.7 Promise 的执行时序（宏任务&amp;微任务）</a></li></ul></li></ul></nav>
<h2 id="_1-回调函数" tabindex="-1">1. 回调函数 <a class="header-anchor" href="#_1-回调函数" aria-label="Permalink to &quot;1. 回调函数&quot;">&ZeroWidthSpace;</a></h2>
<p>回调函数是所有异步编程方案的根基，回调函数由调用者定义，交给执行者执行，具体用法就是把函数作为参数传递罢了。</p>
<p>除了传递回调函数参数以外，还有几种常见的实现异步的方式如事件机制、发布订阅，可以理解为回调函数的变体。</p>
<p>当使用传统回调方式去完成复杂的异步流程时，会无法避免大量的回调函数嵌套，造成回调地狱问题</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #82AAFF">setTimeout</span><span style="color: #BABED8">(</span><span style="color: #C792EA">function</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">()</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #BABED8">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">1.执行任务1 -&gt; 三秒后执行任务2</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #82AAFF">setTimeout</span><span style="color: #F07178">(</span><span style="color: #C792EA">function</span><span style="color: #F07178"> </span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #BABED8">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">2.执行任务2 -&gt; 2秒后执行任务1</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">setTimeout</span><span style="color: #F07178">(</span><span style="color: #C792EA">function</span><span style="color: #F07178"> </span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #BABED8">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">3.执行任务3 -&gt; 1秒后执行完毕</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">      </span><span style="color: #676E95; font-style: italic">// 回调地狱...</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">},</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1000</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">},</span><span style="color: #F07178"> </span><span style="color: #F78C6C">2000</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">},</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">3000</span><span style="color: #BABED8">)</span></span></code></pre>
</div><h2 id="_2-promise" tabindex="-1">2. Promise <a class="header-anchor" href="#_2-promise" aria-label="Permalink to &quot;2. Promise&quot;">&ZeroWidthSpace;</a></h2>
<p><strong>为了避免回调地狱问题</strong>，CommonJS社区提出了Promise规范，并在ES2015中被标准化。Promise实际上就是一个对象，用来表示一个异步任务执行过后究竟是成功还是失败，无论成功或失败只需要执行相应的回调函数即可。</p>
<img src="/2023/promise1.png" width="80%" style="margin: 1% 10% 1% 10%;"/>
<h3 id="_2-1-promise-的基本用法" tabindex="-1">2.1 Promise 的基本用法 <a class="header-anchor" href="#_2-1-promise-的基本用法" aria-label="Permalink to &quot;2.1 Promise 的基本用法&quot;">&ZeroWidthSpace;</a></h3>
<ol>
<li>构建Promise实例时传入一个函数，函数的参数为两个处理函数，在Promise里编写承诺的逻辑，即什么情况下成功，什么情况下失败，并在成功或失败时改变状态，执行提前注册的处理函数</li>
<li>使用then方法分别注册promise实例的onFulfilledon和onRejected回调函数</li>
<li>注意注册的函数不会立即执行，而是等待同步代码执行完才会执行（如下例）</li>
</ol>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">let</span><span style="color: #BABED8"> a </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> b </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">2</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #BABED8"> promise </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">new</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">Promise</span><span style="color: #BABED8">(</span><span style="color: #C792EA">function</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #BABED8; font-style: italic">res</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">rej</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #BABED8">a</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&gt;</span><span style="color: #F07178"> </span><span style="color: #BABED8">b</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">res</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">success</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">) </span><span style="color: #676E95; font-style: italic">// 成功时调用res函数</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">else</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">rej</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">fail</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)    </span><span style="color: #676E95; font-style: italic">// 失败时调用rej函数</span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #BABED8">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #BABED8">promise</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #BABED8">(</span><span style="color: #C792EA">function</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #BABED8; font-style: italic">sucStr</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #BABED8">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #BABED8">sucStr</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">},</span><span style="color: #BABED8"> </span><span style="color: #C792EA">function</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #BABED8; font-style: italic">failStr</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #BABED8">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #BABED8">failStr</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #BABED8">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #BABED8">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">第一个同步任务执行才会执行提前注册的异步处理函数</span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8">)</span></span></code></pre>
</div><h3 id="_2-2-promise-封装一个异步任务函数" tabindex="-1">2.2 Promise 封装一个异步任务函数 <a class="header-anchor" href="#_2-2-promise-封装一个异步任务函数" aria-label="Permalink to &quot;2.2 Promise 封装一个异步任务函数&quot;">&ZeroWidthSpace;</a></h3>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">// 使用promise封装一个ajax请求</span></span>
<span class="line"><span style="color: #C792EA">function</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">ajax</span><span style="color: #89DDFF">(</span><span style="color: #BABED8; font-style: italic">url</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #FFCB6B">Promise</span><span style="color: #F07178">(</span><span style="color: #C792EA">function</span><span style="color: #F07178"> </span><span style="color: #89DDFF">(</span><span style="color: #BABED8; font-style: italic">resolve</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #BABED8; font-style: italic">reject</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #BABED8">xhr</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #82AAFF">XMLHttpRequest</span><span style="color: #F07178">()</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #BABED8">xhr</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">open</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">GET</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #BABED8">url</span><span style="color: #F07178">)        </span><span style="color: #676E95; font-style: italic">// 指定请求方法和地址</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #BABED8">xhr</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">responseType</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">json</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">   </span><span style="color: #676E95; font-style: italic">// 指定相应类型为json</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #BABED8">xhr</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">onload</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #C792EA">function</span><span style="color: #F07178"> </span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span><span style="color: #F07178">  </span><span style="color: #676E95; font-style: italic">// 请求完成后执行onload函数</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">this.</span><span style="color: #BABED8">status</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #F78C6C">200</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #82AAFF">resolve</span><span style="color: #F07178">(</span><span style="color: #89DDFF">this.</span><span style="color: #BABED8">response</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #82AAFF">reject</span><span style="color: #F07178">(</span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #82AAFF">Error</span><span style="color: #F07178">(</span><span style="color: #89DDFF">this.</span><span style="color: #BABED8">status</span><span style="color: #F07178">))</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #BABED8">xhr</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">send</span><span style="color: #F07178">()</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #82AAFF">ajax</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">/user.json</span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8">)</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #BABED8">(</span><span style="color: #C792EA">function</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #BABED8; font-style: italic">res</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #BABED8">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #BABED8">res</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">},</span><span style="color: #BABED8"> </span><span style="color: #C792EA">function</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #BABED8; font-style: italic">err</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #BABED8">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #BABED8">err</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #BABED8">)</span></span></code></pre>
</div><h3 id="_2-3-promise-的链式调用" tabindex="-1">2.3 Promise 的链式调用 <a class="header-anchor" href="#_2-3-promise-的链式调用" aria-label="Permalink to &quot;2.3 Promise 的链式调用&quot;">&ZeroWidthSpace;</a></h3>
<p>promise的本质也是使用回调函数，即通过then方法传递进去，而且promise将回调分成了两种即成功的回调和失败的回调。但是如果需要串联执行多个异步任务，还是会出现回调地狱的问题，这时候使用promise就没有任何意义了，还额外增加了复杂度。</p>
<p>所以嵌套使用promise是不可取的，正确的做法是使用promise方法链式调用的特点来尽量保证串联异步任务的 “扁平化”。</p>
<ul>
<li>promise的then方法会返回一个<strong>全新的</strong>promise对象，用于实现promise的链式调用</li>
<li>后面的then就是在为前面then返回的promise注册回调</li>
<li>前面then方法中调用函数的返回值会作为后面then方法回调的参数</li>
<li>若回调中返回的是一个promise对象，则后面then方法的回调会等待他的结束</li>
</ul>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #82AAFF">ajax</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">api/url1</span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8">)</span></span>
<span class="line"><span style="color: #BABED8">	</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #BABED8">(</span><span style="color: #BABED8; font-style: italic">value</span><span style="color: #BABED8"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">		</span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #82AAFF">ajax</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">api/url2</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #BABED8">)</span></span>
<span class="line"><span style="color: #BABED8">	</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #BABED8">(</span><span style="color: #BABED8; font-style: italic">value</span><span style="color: #BABED8"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">		</span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #82AAFF">ajax</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">api/url3</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #BABED8">)</span></span>
<span class="line"><span style="color: #BABED8">	</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #BABED8">(</span><span style="color: #BABED8; font-style: italic">value</span><span style="color: #BABED8"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">		</span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #82AAFF">ajax</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">api/url4</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #BABED8">)</span></span>
<span class="line"><span style="color: #BABED8">	</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">catch</span><span style="color: #BABED8">(</span><span style="color: #BABED8; font-style: italic">error</span><span style="color: #BABED8"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">		</span><span style="color: #BABED8">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #BABED8">error</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #BABED8">)</span></span></code></pre>
</div><p>多次catch的链式调用（<em>for test</em>）：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #BABED8"> p </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">Promise</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">reject</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">new</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">Error</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">fail1</span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8">))</span></span>
<span class="line"></span>
<span class="line"><span style="color: #BABED8">p</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">catch</span><span style="color: #BABED8">(</span><span style="color: #BABED8; font-style: italic">err</span><span style="color: #BABED8"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #BABED8"> console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #BABED8">(err))</span></span>
<span class="line"><span style="color: #BABED8">	</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">()</span><span style="color: #C792EA">=&gt;</span><span style="color: #BABED8">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">ok1</span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8">))</span></span>
<span class="line"><span style="color: #BABED8">	</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">()</span><span style="color: #C792EA">=&gt;</span><span style="color: #BABED8">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">ok2</span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8">))</span></span>
<span class="line"><span style="color: #BABED8">	</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">()</span><span style="color: #C792EA">=&gt;</span><span style="color: #89DDFF">{</span><span style="color: #89DDFF; font-style: italic">throw</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #82AAFF">Error</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">fail2</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)</span><span style="color: #89DDFF">}</span><span style="color: #BABED8">)</span></span>
<span class="line"><span style="color: #BABED8">	</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">catch</span><span style="color: #BABED8">(</span><span style="color: #BABED8; font-style: italic">err</span><span style="color: #BABED8"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #BABED8"> console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #BABED8">(err))</span></span>
<span class="line"><span style="color: #BABED8">	</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">()</span><span style="color: #C792EA">=&gt;</span><span style="color: #BABED8">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">ok3</span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8">))</span></span>
<span class="line"><span style="color: #BABED8">	</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">()</span><span style="color: #C792EA">=&gt;</span><span style="color: #BABED8">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">ok4</span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8">))</span></span></code></pre>
</div><h3 id="_2-4-promise-的异常处理" tabindex="-1">2.4 Promise 的异常处理 <a class="header-anchor" href="#_2-4-promise-的异常处理" aria-label="Permalink to &quot;2.4 Promise 的异常处理&quot;">&ZeroWidthSpace;</a></h3>
<p>除了promise的执行逻辑执行了reject函数，在promise在执行的过程中出现错误或者主动抛出异常也会执行reject函数，所以then方法中注册的onrejected函数就是为promise的异常做处理，即promise失败或者出现异常都会被执行。其实onrejected函数的注册还有一个更常见的用法，即使用promise实例的catch方法注册onrejected回调</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #82AAFF">ajax</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">/user.json</span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8">)</span></span>
<span class="line"><span style="color: #BABED8">  </span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #BABED8">(</span><span style="color: #C792EA">function</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">onFulfilled</span><span style="color: #89DDFF">(</span><span style="color: #BABED8; font-style: italic">res</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #BABED8">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #BABED8">res</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #BABED8">)</span></span>
<span class="line"><span style="color: #BABED8">  </span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">catch</span><span style="color: #BABED8">(</span><span style="color: #C792EA">function</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">onRejcted</span><span style="color: #89DDFF">(</span><span style="color: #BABED8; font-style: italic">error</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #BABED8">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #BABED8">error</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #BABED8">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #676E95; font-style: italic">// 等同于</span></span>
<span class="line"><span style="color: #82AAFF">ajax</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">/user.json</span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8">)</span></span>
<span class="line"><span style="color: #BABED8">  </span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #BABED8">(</span><span style="color: #C792EA">function</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">onFulfilled</span><span style="color: #89DDFF">(</span><span style="color: #BABED8; font-style: italic">res</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #BABED8">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #BABED8">res</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #BABED8">)</span></span>
<span class="line"><span style="color: #BABED8">  </span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">undefined,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">function</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">onRejcted</span><span style="color: #89DDFF">(</span><span style="color: #BABED8; font-style: italic">error</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #BABED8">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #BABED8">error</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #BABED8">)</span></span></code></pre>
</div><p>用catch方法更常见，因为更适合链式调用。错误会随着promise链条传递，所以最后使用c<strong>atch方法更像是给整个promise链条注册的失败回调</strong></p>
<h3 id="_2-5-promise-的静态方法" tabindex="-1">2.5 Promise 的静态方法 <a class="header-anchor" href="#_2-5-promise-的静态方法" aria-label="Permalink to &quot;2.5 Promise 的静态方法&quot;">&ZeroWidthSpace;</a></h3>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #FFCB6B">Promise</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">resolve</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">success</span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8">)  </span><span style="color: #676E95; font-style: italic">// 直接返回一个成功的Promise对象</span></span>
<span class="line"><span style="color: #FFCB6B">Promise</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">resolve</span><span style="color: #BABED8">(promise)    </span><span style="color: #676E95; font-style: italic">// 如果接收到一个promise对象则原样返回</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FFCB6B">Promise</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">reject</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">new</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">Error</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">rejected</span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8">)) </span><span style="color: #676E95; font-style: italic">// 快速得到一个一定是失败的promise对象</span></span>
<span class="line"><span style="color: #BABED8">	</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">catch</span><span style="color: #BABED8">(</span><span style="color: #BABED8; font-style: italic">error</span><span style="color: #BABED8"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #BABED8"> console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #BABED8">(err))</span></span></code></pre>
</div><h3 id="_2-6-promise-并行执行" tabindex="-1">2.6 Promise 并行执行 <a class="header-anchor" href="#_2-6-promise-并行执行" aria-label="Permalink to &quot;2.6 Promise 并行执行&quot;">&ZeroWidthSpace;</a></h3>
<p>前面都是多个promise串联执行异步任务，而当多个任务彼此没有依赖时可以并行执行来提高执行速度，Promise.all方法可以将多个promise合并为一个promise统一管理。Promise.all()接收一个数组，数组中每个元素都是一个promise对象，并返回一个全新的promise对象，当其内部所有的promise都完成后，这个新的promise对象才会完成，且其拿到的结果也是一个数组，数组包含每个异步任务执行的结果。其中任何一个promise失败，这个新的promise也就失败了。</p>
<p>示例：先拿到要访问的url列表，再并行访问</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #82AAFF">ajax</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">/urls.json</span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8">)</span></span>
<span class="line"><span style="color: #BABED8">  </span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #BABED8">(</span><span style="color: #BABED8; font-style: italic">value</span><span style="color: #BABED8"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #BABED8">urls</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #BABED8">Object</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">values</span><span style="color: #F07178">(</span><span style="color: #BABED8">value</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #BABED8">tasks</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #BABED8">urls</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">map</span><span style="color: #F07178">(</span><span style="color: #BABED8; font-style: italic">map</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #82AAFF">ajax</span><span style="color: #F07178">(</span><span style="color: #BABED8">url</span><span style="color: #F07178">))</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #FFCB6B">Promise</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">all</span><span style="color: #F07178">(</span><span style="color: #BABED8">tasks</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #BABED8">)</span></span>
<span class="line"><span style="color: #BABED8">  </span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #BABED8">(</span><span style="color: #BABED8; font-style: italic">values</span><span style="color: #BABED8"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #BABED8">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #BABED8">values</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #BABED8">)</span></span></code></pre>
</div><p>Promise.race()也可以将多个promise合并为一个promise对象，但Promise.all()等待所有任务结束才会结束，而Promise.race()只会等待第一个先结束的任务。</p>
<p>示例：一个请求promise+一个定时promise用于处理请求超时</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #BABED8"> request </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">ajax</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">/urls.json</span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8">)</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #BABED8"> timeout </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">new</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">Promise</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">(</span><span style="color: #BABED8; font-style: italic">resolve</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">reject</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #82AAFF">setTimeout</span><span style="color: #F07178">(</span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #82AAFF">reject</span><span style="color: #F07178">(</span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #82AAFF">Error</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">timeout</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">))</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #F78C6C">500</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #BABED8">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FFCB6B">Promise</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">race</span><span style="color: #BABED8">([</span></span>
<span class="line"><span style="color: #BABED8">  request</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #BABED8">  timeout</span></span>
<span class="line"><span style="color: #BABED8">])</span></span>
<span class="line"><span style="color: #BABED8">  </span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #BABED8">(</span><span style="color: #BABED8; font-style: italic">value</span><span style="color: #BABED8"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">{</span><span style="color: #F07178"> </span><span style="color: #BABED8">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #BABED8">value</span><span style="color: #F07178">) </span><span style="color: #89DDFF">}</span><span style="color: #BABED8">)</span></span>
<span class="line"><span style="color: #BABED8">  </span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">catch</span><span style="color: #BABED8">(</span><span style="color: #BABED8; font-style: italic">error</span><span style="color: #BABED8"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">{</span><span style="color: #F07178"> </span><span style="color: #BABED8">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #BABED8">error</span><span style="color: #F07178">) </span><span style="color: #89DDFF">}</span><span style="color: #BABED8">)</span></span></code></pre>
</div><h3 id="_2-7-promise-的执行时序-宏任务-微任务" tabindex="-1">2.7 Promise 的执行时序（宏任务&amp;微任务） <a class="header-anchor" href="#_2-7-promise-的执行时序-宏任务-微任务" aria-label="Permalink to &quot;2.7 Promise 的执行时序（宏任务&amp;微任务）&quot;">&ZeroWidthSpace;</a></h3>
<p>即使Promise没有任何的异步操作，它的回调函数仍然不会立即执行而是进入回调队列中排队，即等待所有同步代码执行完后才会执行。</p>
<p>但在回调队列中排队等待的任务并不是平等的。回调队列中的任务称为宏任务，宏任务的执行过程中可以临时加上一些额外需求，这些临时需求可以作为新的宏任务进到队列排队（如下setTimeout回调），也可以作为当前任务的微任务，直接在本轮调用的末尾立即执行（如下Promise回调），微任务的概念是后来才提到JS中的，目的是为了提高整体响应能力。目前绝大多数异步调用的API都是作为宏任务执行，而作为微任务的有Promise &amp; MutationObserver &amp; Node中的process.nextTick</p>
<aside>
💡 在浏览器环境中有两个任务队列：宏任务和微任务队列，微任务队列优先级更高，所以同步代码执行完或每次一个宏任务执行完后，都会优先清空微任务队列。
<p>在Node中，任务队列的优先级划分比浏览器更加细化。</p>
</aside>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #BABED8">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">start</span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #82AAFF">setTimeout</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">()</span><span style="color: #BABED8"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #BABED8"> console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">settimeout</span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8">)</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">0</span><span style="color: #BABED8">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FFCB6B">Promise</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">resolve</span><span style="color: #BABED8">()</span></span>
<span class="line"><span style="color: #BABED8">  </span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">()</span><span style="color: #BABED8"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #BABED8"> console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">promise1</span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8">))</span></span>
<span class="line"><span style="color: #BABED8">  </span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">()</span><span style="color: #BABED8"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #BABED8"> console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">promise2</span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8">))</span></span>
<span class="line"><span style="color: #BABED8">  </span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">()</span><span style="color: #BABED8"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #BABED8"> console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">promise3</span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8">))</span></span>
<span class="line"></span>
<span class="line"><span style="color: #BABED8">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">end</span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #676E95; font-style: italic">//</span></span></code></pre>
</div>]]></description>
            <content:encoded><![CDATA[<p>JavaScript的一个核心特性是单线程执行，这里的单线程是指代码的执行是单线程的（宿主环境的API可以多线程），其最初的目的是为了避免多线程的DOM操作可能带来的错乱。优点是更安全简单，缺点是当遇到一个耗时任务时，后面的任务会被阻塞，从而拖延整个程序的执行。</p>
<p>为了解决耗时任务阻塞线程的问题，JavaScript将任务的执行模式分为了同步模式和异步模式，运行环境也提供了以同步或者异步模式运行的API。</p>
<ul>
<li><strong>同步模式</strong>: 任务排队执行，执行过程容易理解。</li>
<li><strong>异步模式</strong>: 对于耗时操作，开启过后就立即往后执行下一个任务，异步后续的逻辑一般通过回调函数的方式定义，在耗时任务执行过后就会自动执行传入的回调函数。</li>
</ul>
<img src="/2023/promise0.png" width="80%" style="margin: 1% 10% 1% 10%;"/>
<p>JavaScript引擎会先执行完调用栈中的任务，然后通过事件循环从“消息队列”中再取一个出来执行，在此过程中，可以随时再往消息队列中添加任务。也正是因为大量的异步模式的API导致代码一些复杂的异步逻辑不易阅读。</p>
<nav class="table-of-contents"><ul><li><a href="#_1-回调函数">1. 回调函数</a></li><li><a href="#_2-promise">2. Promise</a><ul><li><a href="#_2-1-promise-的基本用法">2.1 Promise 的基本用法</a></li><li><a href="#_2-2-promise-封装一个异步任务函数">2.2 Promise 封装一个异步任务函数</a></li><li><a href="#_2-3-promise-的链式调用">2.3 Promise 的链式调用</a></li><li><a href="#_2-4-promise-的异常处理">2.4 Promise 的异常处理</a></li><li><a href="#_2-5-promise-的静态方法">2.5 Promise 的静态方法</a></li><li><a href="#_2-6-promise-并行执行">2.6 Promise 并行执行</a></li><li><a href="#_2-7-promise-的执行时序-宏任务-微任务">2.7 Promise 的执行时序（宏任务&amp;微任务）</a></li></ul></li><li><a href="#_3-generator异步方案">3. Generator异步方案</a></li><li><a href="#_4-async-await语法糖">4. Async/Await语法糖</a></li></ul></nav>
<h2 id="_1-回调函数" tabindex="-1">1. 回调函数 <a class="header-anchor" href="#_1-回调函数" aria-label="Permalink to &quot;1. 回调函数&quot;">&ZeroWidthSpace;</a></h2>
<p>回调函数是所有异步编程方案的根基，回调函数由调用者定义，交给执行者执行，具体用法就是把函数作为参数传递罢了。</p>
<p>除了传递回调函数参数以外，还有几种常见的实现异步的方式如事件机制、发布订阅，可以理解为回调函数的变体。</p>
<p>当使用传统回调方式去完成复杂的异步流程时，会无法避免大量的回调函数嵌套，造成回调地狱问题</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #82AAFF">setTimeout</span><span style="color: #BABED8">(</span><span style="color: #C792EA">function</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">()</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #BABED8">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">1.执行任务1 -&gt; 三秒后执行任务2</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #82AAFF">setTimeout</span><span style="color: #F07178">(</span><span style="color: #C792EA">function</span><span style="color: #F07178"> </span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #BABED8">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">2.执行任务2 -&gt; 2秒后执行任务1</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">setTimeout</span><span style="color: #F07178">(</span><span style="color: #C792EA">function</span><span style="color: #F07178"> </span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #BABED8">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">3.执行任务3 -&gt; 1秒后执行完毕</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">      </span><span style="color: #676E95; font-style: italic">// 回调地狱...</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">},</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1000</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">},</span><span style="color: #F07178"> </span><span style="color: #F78C6C">2000</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">},</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">3000</span><span style="color: #BABED8">)</span></span></code></pre>
</div><h2 id="_2-promise" tabindex="-1">2. Promise <a class="header-anchor" href="#_2-promise" aria-label="Permalink to &quot;2. Promise&quot;">&ZeroWidthSpace;</a></h2>
<p><strong>为了避免回调地狱问题</strong>，CommonJS社区提出了Promise规范，并在ES2015中被标准化。Promise实际上就是一个对象，用来表示一个异步任务执行过后究竟是成功还是失败，无论成功或失败只需要执行相应的回调函数即可。</p>
<img src="/2023/promise1.png" width="80%" style="margin: 1% 10% 1% 10%;"/>
<h3 id="_2-1-promise-的基本用法" tabindex="-1">2.1 Promise 的基本用法 <a class="header-anchor" href="#_2-1-promise-的基本用法" aria-label="Permalink to &quot;2.1 Promise 的基本用法&quot;">&ZeroWidthSpace;</a></h3>
<ol>
<li>构建Promise实例时传入一个函数，函数的参数为两个处理函数，在Promise里编写承诺的逻辑，即什么情况下成功，什么情况下失败，并在成功或失败时改变状态，执行提前注册的处理函数</li>
<li>使用then方法分别注册promise实例的onFulfilledon和onRejected回调函数</li>
<li>注意注册的函数不会立即执行，而是等待同步代码执行完才会执行（如下例）</li>
</ol>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">let</span><span style="color: #BABED8"> a </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> b </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">2</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #BABED8"> promise </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">new</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">Promise</span><span style="color: #BABED8">(</span><span style="color: #C792EA">function</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #BABED8; font-style: italic">res</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">rej</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #BABED8">a</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&gt;</span><span style="color: #F07178"> </span><span style="color: #BABED8">b</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">res</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">success</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">) </span><span style="color: #676E95; font-style: italic">// 成功时调用res函数</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">else</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">rej</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">fail</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)    </span><span style="color: #676E95; font-style: italic">// 失败时调用rej函数</span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #BABED8">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #BABED8">promise</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #BABED8">(</span><span style="color: #C792EA">function</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #BABED8; font-style: italic">sucStr</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #BABED8">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #BABED8">sucStr</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">},</span><span style="color: #BABED8"> </span><span style="color: #C792EA">function</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #BABED8; font-style: italic">failStr</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #BABED8">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #BABED8">failStr</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #BABED8">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #BABED8">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">第一个同步任务执行才会执行提前注册的异步处理函数</span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8">)</span></span></code></pre>
</div><h3 id="_2-2-promise-封装一个异步任务函数" tabindex="-1">2.2 Promise 封装一个异步任务函数 <a class="header-anchor" href="#_2-2-promise-封装一个异步任务函数" aria-label="Permalink to &quot;2.2 Promise 封装一个异步任务函数&quot;">&ZeroWidthSpace;</a></h3>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">// 使用promise封装一个ajax请求</span></span>
<span class="line"><span style="color: #C792EA">function</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">ajax</span><span style="color: #89DDFF">(</span><span style="color: #BABED8; font-style: italic">url</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #FFCB6B">Promise</span><span style="color: #F07178">(</span><span style="color: #C792EA">function</span><span style="color: #F07178"> </span><span style="color: #89DDFF">(</span><span style="color: #BABED8; font-style: italic">resolve</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #BABED8; font-style: italic">reject</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #BABED8">xhr</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #82AAFF">XMLHttpRequest</span><span style="color: #F07178">()</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #BABED8">xhr</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">open</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">GET</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #BABED8">url</span><span style="color: #F07178">)        </span><span style="color: #676E95; font-style: italic">// 指定请求方法和地址</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #BABED8">xhr</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">responseType</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">json</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">   </span><span style="color: #676E95; font-style: italic">// 指定相应类型为json</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #BABED8">xhr</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">onload</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #C792EA">function</span><span style="color: #F07178"> </span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span><span style="color: #F07178">  </span><span style="color: #676E95; font-style: italic">// 请求完成后执行onload函数</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">this.</span><span style="color: #BABED8">status</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #F78C6C">200</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #82AAFF">resolve</span><span style="color: #F07178">(</span><span style="color: #89DDFF">this.</span><span style="color: #BABED8">response</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #82AAFF">reject</span><span style="color: #F07178">(</span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #82AAFF">Error</span><span style="color: #F07178">(</span><span style="color: #89DDFF">this.</span><span style="color: #BABED8">status</span><span style="color: #F07178">))</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #BABED8">xhr</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">send</span><span style="color: #F07178">()</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #82AAFF">ajax</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">/user.json</span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8">)</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #BABED8">(</span><span style="color: #C792EA">function</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #BABED8; font-style: italic">res</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #BABED8">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #BABED8">res</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">},</span><span style="color: #BABED8"> </span><span style="color: #C792EA">function</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #BABED8; font-style: italic">err</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #BABED8">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #BABED8">err</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #BABED8">)</span></span></code></pre>
</div><h3 id="_2-3-promise-的链式调用" tabindex="-1">2.3 Promise 的链式调用 <a class="header-anchor" href="#_2-3-promise-的链式调用" aria-label="Permalink to &quot;2.3 Promise 的链式调用&quot;">&ZeroWidthSpace;</a></h3>
<p>promise的本质也是使用回调函数，即通过then方法传递进去，而且promise将回调分成了两种即成功的回调和失败的回调。但是如果需要串联执行多个异步任务，还是会出现回调地狱的问题，这时候使用promise就没有任何意义了，还额外增加了复杂度。</p>
<p>所以嵌套使用promise是不可取的，正确的做法是使用promise方法链式调用的特点来尽量保证串联异步任务的 “扁平化”。</p>
<ul>
<li>promise的then方法会返回一个<strong>全新的</strong>promise对象，用于实现promise的链式调用</li>
<li>后面的then就是在为前面then返回的promise注册回调</li>
<li>前面then方法中调用函数的返回值会作为后面then方法回调的参数</li>
<li>若回调中返回的是一个promise对象，则后面then方法的回调会等待他的结束</li>
</ul>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #82AAFF">ajax</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">api/url1</span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8">)</span></span>
<span class="line"><span style="color: #BABED8">	</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #BABED8">(</span><span style="color: #BABED8; font-style: italic">value</span><span style="color: #BABED8"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">		</span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #82AAFF">ajax</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">api/url2</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #BABED8">)</span></span>
<span class="line"><span style="color: #BABED8">	</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #BABED8">(</span><span style="color: #BABED8; font-style: italic">value</span><span style="color: #BABED8"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">		</span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #82AAFF">ajax</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">api/url3</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #BABED8">)</span></span>
<span class="line"><span style="color: #BABED8">	</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #BABED8">(</span><span style="color: #BABED8; font-style: italic">value</span><span style="color: #BABED8"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">		</span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #82AAFF">ajax</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">api/url4</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #BABED8">)</span></span>
<span class="line"><span style="color: #BABED8">	</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">catch</span><span style="color: #BABED8">(</span><span style="color: #BABED8; font-style: italic">error</span><span style="color: #BABED8"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">		</span><span style="color: #BABED8">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #BABED8">error</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #BABED8">)</span></span></code></pre>
</div><p>多次catch的链式调用（<em>for test</em>）：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #BABED8"> p </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">Promise</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">reject</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">new</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">Error</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">fail1</span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8">))</span></span>
<span class="line"></span>
<span class="line"><span style="color: #BABED8">p</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">catch</span><span style="color: #BABED8">(</span><span style="color: #BABED8; font-style: italic">err</span><span style="color: #BABED8"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #BABED8"> console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #BABED8">(err))</span></span>
<span class="line"><span style="color: #BABED8">	</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">()</span><span style="color: #C792EA">=&gt;</span><span style="color: #BABED8">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">ok1</span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8">))</span></span>
<span class="line"><span style="color: #BABED8">	</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">()</span><span style="color: #C792EA">=&gt;</span><span style="color: #BABED8">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">ok2</span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8">))</span></span>
<span class="line"><span style="color: #BABED8">	</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">()</span><span style="color: #C792EA">=&gt;</span><span style="color: #89DDFF">{</span><span style="color: #89DDFF; font-style: italic">throw</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #82AAFF">Error</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">fail2</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)</span><span style="color: #89DDFF">}</span><span style="color: #BABED8">)</span></span>
<span class="line"><span style="color: #BABED8">	</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">catch</span><span style="color: #BABED8">(</span><span style="color: #BABED8; font-style: italic">err</span><span style="color: #BABED8"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #BABED8"> console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #BABED8">(err))</span></span>
<span class="line"><span style="color: #BABED8">	</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">()</span><span style="color: #C792EA">=&gt;</span><span style="color: #BABED8">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">ok3</span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8">))</span></span>
<span class="line"><span style="color: #BABED8">	</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">()</span><span style="color: #C792EA">=&gt;</span><span style="color: #BABED8">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">ok4</span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8">))</span></span></code></pre>
</div><h3 id="_2-4-promise-的异常处理" tabindex="-1">2.4 Promise 的异常处理 <a class="header-anchor" href="#_2-4-promise-的异常处理" aria-label="Permalink to &quot;2.4 Promise 的异常处理&quot;">&ZeroWidthSpace;</a></h3>
<p>除了promise的执行逻辑执行了reject函数，在promise在执行的过程中出现错误或者主动抛出异常也会执行reject函数，所以then方法中注册的onrejected函数就是为promise的异常做处理，即promise失败或者出现异常都会被执行。其实onrejected函数的注册还有一个更常见的用法，即使用promise实例的catch方法注册onrejected回调</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #82AAFF">ajax</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">/user.json</span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8">)</span></span>
<span class="line"><span style="color: #BABED8">  </span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #BABED8">(</span><span style="color: #C792EA">function</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">onFulfilled</span><span style="color: #89DDFF">(</span><span style="color: #BABED8; font-style: italic">res</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #BABED8">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #BABED8">res</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #BABED8">)</span></span>
<span class="line"><span style="color: #BABED8">  </span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">catch</span><span style="color: #BABED8">(</span><span style="color: #C792EA">function</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">onRejcted</span><span style="color: #89DDFF">(</span><span style="color: #BABED8; font-style: italic">error</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #BABED8">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #BABED8">error</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #BABED8">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #676E95; font-style: italic">// 等同于</span></span>
<span class="line"><span style="color: #82AAFF">ajax</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">/user.json</span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8">)</span></span>
<span class="line"><span style="color: #BABED8">  </span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #BABED8">(</span><span style="color: #C792EA">function</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">onFulfilled</span><span style="color: #89DDFF">(</span><span style="color: #BABED8; font-style: italic">res</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #BABED8">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #BABED8">res</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #BABED8">)</span></span>
<span class="line"><span style="color: #BABED8">  </span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">undefined,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">function</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">onRejcted</span><span style="color: #89DDFF">(</span><span style="color: #BABED8; font-style: italic">error</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #BABED8">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #BABED8">error</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #BABED8">)</span></span></code></pre>
</div><p>用catch方法更常见，因为更适合链式调用。错误会随着promise链条传递，所以最后使用c<strong>atch方法更像是给整个promise链条注册的失败回调</strong></p>
<h3 id="_2-5-promise-的静态方法" tabindex="-1">2.5 Promise 的静态方法 <a class="header-anchor" href="#_2-5-promise-的静态方法" aria-label="Permalink to &quot;2.5 Promise 的静态方法&quot;">&ZeroWidthSpace;</a></h3>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #FFCB6B">Promise</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">resolve</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">success</span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8">)  </span><span style="color: #676E95; font-style: italic">// 直接返回一个成功的Promise对象</span></span>
<span class="line"><span style="color: #FFCB6B">Promise</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">resolve</span><span style="color: #BABED8">(promise)    </span><span style="color: #676E95; font-style: italic">// 如果接收到一个promise对象则原样返回</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FFCB6B">Promise</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">reject</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">new</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">Error</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">rejected</span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8">)) </span><span style="color: #676E95; font-style: italic">// 快速得到一个一定是失败的promise对象</span></span>
<span class="line"><span style="color: #BABED8">	</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">catch</span><span style="color: #BABED8">(</span><span style="color: #BABED8; font-style: italic">error</span><span style="color: #BABED8"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #BABED8"> console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #BABED8">(err))</span></span></code></pre>
</div><h3 id="_2-6-promise-并行执行" tabindex="-1">2.6 Promise 并行执行 <a class="header-anchor" href="#_2-6-promise-并行执行" aria-label="Permalink to &quot;2.6 Promise 并行执行&quot;">&ZeroWidthSpace;</a></h3>
<p>前面都是多个promise串联执行异步任务，而当多个任务彼此没有依赖时可以并行执行来提高执行速度，Promise.all方法可以将多个promise合并为一个promise统一管理。Promise.all()接收一个数组，数组中每个元素都是一个promise对象，并返回一个全新的promise对象，当其内部所有的promise都完成后，这个新的promise对象才会完成，且其拿到的结果也是一个数组，数组包含每个异步任务执行的结果。其中任何一个promise失败，这个新的promise也就失败了。</p>
<p>示例：先拿到要访问的url列表，再并行访问</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #82AAFF">ajax</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">/urls.json</span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8">)</span></span>
<span class="line"><span style="color: #BABED8">  </span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #BABED8">(</span><span style="color: #BABED8; font-style: italic">value</span><span style="color: #BABED8"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #BABED8">urls</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #BABED8">Object</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">values</span><span style="color: #F07178">(</span><span style="color: #BABED8">value</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #BABED8">tasks</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #BABED8">urls</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">map</span><span style="color: #F07178">(</span><span style="color: #BABED8; font-style: italic">map</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #82AAFF">ajax</span><span style="color: #F07178">(</span><span style="color: #BABED8">url</span><span style="color: #F07178">))</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #FFCB6B">Promise</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">all</span><span style="color: #F07178">(</span><span style="color: #BABED8">tasks</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #BABED8">)</span></span>
<span class="line"><span style="color: #BABED8">  </span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #BABED8">(</span><span style="color: #BABED8; font-style: italic">values</span><span style="color: #BABED8"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #BABED8">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #BABED8">values</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #BABED8">)</span></span></code></pre>
</div><p>Promise.race()也可以将多个promise合并为一个promise对象，但Promise.all()等待所有任务结束才会结束，而Promise.race()只会等待第一个先结束的任务。</p>
<p>示例：一个请求promise+一个定时promise用于处理请求超时</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #BABED8"> request </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">ajax</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">/urls.json</span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8">)</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #BABED8"> timeout </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">new</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">Promise</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">(</span><span style="color: #BABED8; font-style: italic">resolve</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">reject</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #82AAFF">setTimeout</span><span style="color: #F07178">(</span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #82AAFF">reject</span><span style="color: #F07178">(</span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #82AAFF">Error</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">timeout</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">))</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #F78C6C">500</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #BABED8">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FFCB6B">Promise</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">race</span><span style="color: #BABED8">([</span></span>
<span class="line"><span style="color: #BABED8">  request</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #BABED8">  timeout</span></span>
<span class="line"><span style="color: #BABED8">])</span></span>
<span class="line"><span style="color: #BABED8">  </span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #BABED8">(</span><span style="color: #BABED8; font-style: italic">value</span><span style="color: #BABED8"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">{</span><span style="color: #F07178"> </span><span style="color: #BABED8">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #BABED8">value</span><span style="color: #F07178">) </span><span style="color: #89DDFF">}</span><span style="color: #BABED8">)</span></span>
<span class="line"><span style="color: #BABED8">  </span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">catch</span><span style="color: #BABED8">(</span><span style="color: #BABED8; font-style: italic">error</span><span style="color: #BABED8"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">{</span><span style="color: #F07178"> </span><span style="color: #BABED8">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #BABED8">error</span><span style="color: #F07178">) </span><span style="color: #89DDFF">}</span><span style="color: #BABED8">)</span></span></code></pre>
</div><h3 id="_2-7-promise-的执行时序-宏任务-微任务" tabindex="-1">2.7 Promise 的执行时序（宏任务&amp;微任务） <a class="header-anchor" href="#_2-7-promise-的执行时序-宏任务-微任务" aria-label="Permalink to &quot;2.7 Promise 的执行时序（宏任务&amp;微任务）&quot;">&ZeroWidthSpace;</a></h3>
<p>即使Promise没有任何的异步操作，它的回调函数仍然不会立即执行而是进入回调队列中排队，即等待所有同步代码执行完后才会执行。</p>
<p>但在回调队列中排队等待的任务并不是平等的。回调队列中的任务称为宏任务，宏任务的执行过程中可以临时加上一些额外需求，这些临时需求可以作为新的宏任务进到队列排队（如下setTimeout回调），也可以作为当前任务的微任务，直接在本轮调用的末尾立即执行（如下Promise回调），微任务的概念是后来才提到JS中的，目的是为了提高整体响应能力。目前绝大多数异步调用的API都是作为宏任务执行，而作为微任务的有Promise &amp; MutationObserver &amp; Node中的process.nextTick</p>
<aside>
💡 在浏览器环境中有两个任务队列：宏任务和微任务队列，微任务队列优先级更高，所以同步代码执行完或每次一个宏任务执行完后，都会优先清空微任务队列。
<p>在Node中，任务队列的优先级划分比浏览器更加细化。</p>
</aside>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #BABED8">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">start</span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #82AAFF">setTimeout</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">()</span><span style="color: #BABED8"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #BABED8"> console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">settimeout</span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8">)</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">0</span><span style="color: #BABED8">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FFCB6B">Promise</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">resolve</span><span style="color: #BABED8">()</span></span>
<span class="line"><span style="color: #BABED8">  </span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">()</span><span style="color: #BABED8"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #BABED8"> console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">promise1</span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8">))</span></span>
<span class="line"><span style="color: #BABED8">  </span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">()</span><span style="color: #BABED8"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #BABED8"> console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">promise2</span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8">))</span></span>
<span class="line"><span style="color: #BABED8">  </span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">()</span><span style="color: #BABED8"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #BABED8"> console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">promise3</span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8">))</span></span>
<span class="line"></span>
<span class="line"><span style="color: #BABED8">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">end</span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #676E95; font-style: italic">// --------------------------</span></span>
<span class="line"><span style="color: #BABED8">start</span></span>
<span class="line"><span style="color: #BABED8">end</span></span>
<span class="line"><span style="color: #BABED8">promise1</span></span>
<span class="line"><span style="color: #BABED8">promise2</span></span>
<span class="line"><span style="color: #BABED8">promise3</span></span>
<span class="line"><span style="color: #BABED8">settimeout</span></span></code></pre>
</div><h2 id="_3-generator异步方案" tabindex="-1">3. Generator异步方案 <a class="header-anchor" href="#_3-generator异步方案" aria-label="Permalink to &quot;3. Generator异步方案&quot;">&ZeroWidthSpace;</a></h2>
<p>相比于传统异步调用的方式，用Promise处理异步调用最大的优势就是可以通过链式调用解决回调嵌套的问题，可以实现异步任务的串联执行，但这样依然有大量的回调函数（尽管没嵌套），依然没有达到传统同步代码的可读性。</p>
<p>ES2015提供了Generator：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">// 生成器函数的语法就是普通函数加个*</span></span>
<span class="line"><span style="color: #C792EA">function</span><span style="color: #89DDFF">*</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">foo</span><span style="color: #89DDFF">()</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">try</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #BABED8">res</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">yield</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">foo</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">  </span><span style="color: #676E95; font-style: italic">// 遇到yield会暂停生成器的执行,并把后面的值返回出去</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #BABED8">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #BABED8">res</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">catch</span><span style="color: #F07178"> (</span><span style="color: #BABED8">e</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #BABED8">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #BABED8">e</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #676E95; font-style: italic">// 调用生成器函数不会立即执行，而是返回一个生成器对象</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #BABED8"> generator </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">foo</span><span style="color: #BABED8">()</span></span>
<span class="line"></span>
<span class="line"><span style="color: #676E95; font-style: italic">// 1.手动调用生成器对象的next方法，生成器函数的函数体才会开始执行</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">// 2.result可以接收yield返回的值</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">// 3.可以传递参数到函数中yield的位置</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #BABED8"> result </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> generator</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">next</span><span style="color: #BABED8">()</span></span>
<span class="line"><span style="color: #BABED8">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #BABED8">(result)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #BABED8">generator</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">next</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">bar</span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #676E95; font-style: italic">// throw方法也可以让生成器继续执行，不过会向生成器中抛出异常</span></span>
<span class="line"><span style="color: #BABED8">generator</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">throw</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">new</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">Error</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">Generator error</span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8">))</span></span></code></pre>
</div><p>可以利用yield暂停生成器函数执行的特点，实现更优的异步编程体验：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">function</span><span style="color: #89DDFF">*</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">main</span><span style="color: #89DDFF">()</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #BABED8">users</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">yield</span><span style="color: #F07178"> </span><span style="color: #82AAFF">ajax</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">/api/users.json</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #BABED8">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #BABED8">users</span><span style="color: #F07178">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #BABED8">posts</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">yield</span><span style="color: #F07178"> </span><span style="color: #82AAFF">ajax</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">/api/posts.json</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #BABED8">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #BABED8">posts</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #BABED8"> g </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">main</span><span style="color: #BABED8">()</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #BABED8"> result </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> g</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">next</span><span style="color: #BABED8">()</span></span>
<span class="line"></span>
<span class="line"><span style="color: #676E95; font-style: italic">// result.value拿到返回的promise对象</span></span>
<span class="line"><span style="color: #BABED8">result</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">value</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #BABED8">(</span><span style="color: #BABED8; font-style: italic">data</span><span style="color: #BABED8"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #BABED8">result2</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #BABED8">g</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">next</span><span style="color: #F07178">(</span><span style="color: #BABED8">data</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #BABED8">result2</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">done</span><span style="color: #F07178">) </span><span style="color: #89DDFF; font-style: italic">return</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #BABED8">result2</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">value</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #F07178">(</span><span style="color: #BABED8; font-style: italic">data</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #BABED8">result3</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #BABED8">g</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">next</span><span style="color: #F07178">(</span><span style="color: #BABED8">data</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #BABED8">result3</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">done</span><span style="color: #F07178">) </span><span style="color: #89DDFF; font-style: italic">return</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #BABED8">result3</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">value</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #F07178">(</span><span style="color: #BABED8; font-style: italic">data</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #BABED8">g</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">next</span><span style="color: #F07178">(</span><span style="color: #BABED8">data</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">	})</span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span></span></code></pre>
</div><p>使用递归优化上述代码，实现更通用的生成器函数的执行器：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">function</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">*</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">main</span><span style="color: #89DDFF">()</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">try</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #BABED8">users</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">yield</span><span style="color: #F07178"> </span><span style="color: #82AAFF">ajax</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">/api/users.json</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #BABED8">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #BABED8">users</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #BABED8">posts</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">yield</span><span style="color: #F07178"> </span><span style="color: #82AAFF">ajax</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">/api/posts.json</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #BABED8">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #BABED8">posts</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">catch</span><span style="color: #F07178"> (</span><span style="color: #BABED8">e</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #BABED8">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #BABED8">e</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">function</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">handleResult</span><span style="color: #89DDFF">(</span><span style="color: #BABED8; font-style: italic">result</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #BABED8">result</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">done</span><span style="color: #F07178">) </span><span style="color: #89DDFF; font-style: italic">return</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #BABED8">result</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">value</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #F07178">(</span><span style="color: #BABED8; font-style: italic">data</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">handleResult</span><span style="color: #F07178">(</span><span style="color: #BABED8">g</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">next</span><span style="color: #F07178">(</span><span style="color: #BABED8">data</span><span style="color: #F07178">))</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">},</span><span style="color: #F07178"> </span><span style="color: #BABED8; font-style: italic">error</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #BABED8">g</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">throw</span><span style="color: #F07178">(</span><span style="color: #BABED8">error</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #BABED8"> g </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">main</span><span style="color: #BABED8">()</span></span>
<span class="line"><span style="color: #82AAFF">handleResult</span><span style="color: #BABED8">(g</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">next</span><span style="color: #BABED8">())</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">/*---------------------------------------------*/</span></span>
<span class="line"></span>
<span class="line"><span style="color: #676E95; font-style: italic">// 进一步封装</span></span>
<span class="line"><span style="color: #C792EA">function</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">co</span><span style="color: #89DDFF">(</span><span style="color: #BABED8; font-style: italic">generator</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #BABED8">g</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">generator</span><span style="color: #F07178">()</span></span>
<span class="line"><span style="color: #F07178">  </span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">function</span><span style="color: #F07178"> </span><span style="color: #82AAFF">handleResult</span><span style="color: #89DDFF">(</span><span style="color: #BABED8; font-style: italic">result</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #BABED8">result</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">done</span><span style="color: #F07178">) </span><span style="color: #89DDFF; font-style: italic">return</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #BABED8">result</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">value</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #F07178">(</span><span style="color: #BABED8; font-style: italic">data</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #82AAFF">handleResult</span><span style="color: #F07178">(</span><span style="color: #BABED8">g</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">next</span><span style="color: #F07178">(</span><span style="color: #BABED8">data</span><span style="color: #F07178">))</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">},</span><span style="color: #F07178"> </span><span style="color: #BABED8; font-style: italic">error</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #BABED8">g</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">throw</span><span style="color: #F07178">(</span><span style="color: #BABED8">error</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #82AAFF">handleResult</span><span style="color: #F07178">(</span><span style="color: #BABED8">g</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">next</span><span style="color: #F07178">())</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #82AAFF">co</span><span style="color: #BABED8">(main)</span></span></code></pre>
</div><p>💡 这种co的实现在2015年前流行，后来出现Async/Await后，就不太用了</p>
<h2 id="_4-async-await语法糖" tabindex="-1">4. Async/Await语法糖 <a class="header-anchor" href="#_4-async-await语法糖" aria-label="Permalink to &quot;4. Async/Await语法糖&quot;">&ZeroWidthSpace;</a></h2>
<p>有了Generator，JS的异步编程就有类似同步的编程体验了，但用Generator方案还需要自己编写一个执行器函数（co），比较麻烦。而在ES2017中新增了Async函数同样提供了扁平化的异步编程体验，使用起来更方便。</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">async</span><span style="color: #BABED8"> </span><span style="color: #C792EA">function</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">main</span><span style="color: #89DDFF">()</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">try</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #BABED8">users</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">await</span><span style="color: #F07178"> </span><span style="color: #82AAFF">ajax</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">/api/users.json</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #BABED8">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #BABED8">users</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #BABED8">posts</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">await</span><span style="color: #F07178"> </span><span style="color: #82AAFF">ajax</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">/api/posts.json</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #BABED8">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #BABED8">posts</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">catch</span><span style="color: #F07178"> (</span><span style="color: #BABED8">e</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #BABED8">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #BABED8">e</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #82AAFF">main</span><span style="color: #BABED8">()</span></span></code></pre>
</div><p>此外，async还会返回一个promise对象，更加利于对整体代码进行控制：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #BABED8"> promise </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">main</span><span style="color: #BABED8">()</span></span>
<span class="line"></span>
<span class="line"><span style="color: #BABED8">promise</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">()</span><span style="color: #BABED8"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">	</span><span style="color: #BABED8">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">all completed</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #BABED8">)</span></span></code></pre>
</div><div class="info custom-block"><p class="custom-block-title">INFO</p>
<p>目前await关键字只能在async函数内部使用，在新标准中可能在外部使用</p>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[JavaScript 基于原型的面向对象]]></title>
            <link>localhost/blog/blog/posts/JavaScript-prototype.html</link>
            <guid>localhost/blog/blog/posts/JavaScript-prototype.html</guid>
            <pubDate>Sat, 15 Jan 2022 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>基于原型（Prototype）的编程其实也是面向对象编程的一种方式。没有 class 化的，直接使用对象。又叫基于实例的编程。其主流的语言就是 JavaScript，与传统的面向对象编程的比较如下：</p>
<ul>
<li>在基于类的编程当中，对象总共有两种类型。类定义了对象的基本布局和函数特性，而接口是“可以使用的”对象，它基于特定类的样式。在此模型中，类表现为行为和结构的集合，对所有接口来说这些类的行为和结构都是相同的。因而，区分规则首先是基于行为和结构，而后才是状态。</li>
<li>原型编程的主张者经常争论说，基于类的语言提倡使用一个关注分类和类之间关系的开发模型。与此相对，原型编程看起来提倡程序员关注一系列对象实例的行为，而之后才关心如何将这些对象划分到最近的使用方式相似的原型对象，而不是分成类。</li>
</ul>
<img src="/2023/js-object0.png" width="80%" style="margin: 1% 10% 1% 10%;"/>
<p>正因如此，很多基于原型的系统提倡运行时进行原型的修改，而只有极少数基于类的面向对象系统（比如第一个动态面向对象的系统 Smalltalk）允许类在程序运行时被修改。</p>
<ul>
<li>在基于类的语言中，一个新的实例通过类构造器和构造器可选的参数来构造，结果实例由类选定的行为和布局创建模型。</li>
<li>在基于原型的系统中构造对象有两种方法，通过复制已有的对象或者通过扩展空对象创建。很多基于原型的系统提倡运行时进行原型的修改，而基于类的面向对象系统只有动态语言允许类在运行时被修改（Python、Ruby...）</li>
</ul>
<h2 id="_1-object" tabindex="-1">1. Object <a class="header-anchor" href="#_1-object" aria-label="Permalink to &quot;1. Object&quot;">&ZeroWidthSpace;</a></h2>
<blockquote>
<p>Object：对象是一个属性的集合，且有一个唯一的原型。原型可以是一个对象或空值。</p>
</blockquote>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">let</span><span style="color: #BABED8"> point </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #BABED8">  </span><span style="color: #F07178">x</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">10</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #BABED8">  </span><span style="color: #F07178">y</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">20</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><img src="/2023/js-object1.png" width="80%" style="margin: 1% 10% 1% 10%;"/>
<p>对于上面定义的 point 对象，<strong>proto</strong> 属性指向 point 对象的原型。原型对象用于通过动态分派机制实现继承。下面让我们用原型链的概念来详细了解这种机制。</p>
<h2 id="_2-prototype" tabindex="-1">2. Prototype <a class="header-anchor" href="#_2-prototype" aria-label="Permalink to &quot;2. Prototype&quot;">&ZeroWidthSpace;</a></h2>
<blockquote>
<p>Protype：一个 prototype 是一个委托对象，用于实现基于原型的继承。</p>
</blockquote>
<p>每个对象在创建时都会接收到其原型。如果未明确设置原型，对象将接收 Object.prototype 作为其原型。可以通过 <strong>proto</strong> 属性或 <code>Object.create()</code> 方法显式设置原型：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">// Base object.</span></span>
<span class="line"><span style="color: #C792EA">let</span><span style="color: #BABED8"> point </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #BABED8">  </span><span style="color: #F07178">x</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">10</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #BABED8">  </span><span style="color: #F07178">y</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">20</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #676E95; font-style: italic">// Inherit from `point` object.</span></span>
<span class="line"><span style="color: #C792EA">let</span><span style="color: #BABED8"> point3D </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #BABED8">  </span><span style="color: #F07178">z</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">30</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #BABED8">  </span><span style="color: #F07178">__proto__</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> point</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #BABED8">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #BABED8">(</span></span>
<span class="line"><span style="color: #BABED8">  point3D</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">x</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic">// 10, inherited</span></span>
<span class="line"><span style="color: #BABED8">  point3D</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">y</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic">// 20, inherited</span></span>
<span class="line"><span style="color: #BABED8">  point3D</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">z </span><span style="color: #676E95; font-style: italic">// 30, own</span></span>
<span class="line"><span style="color: #BABED8">)</span></span></code></pre>
</div><blockquote>
<p>Prototype chain：原型链是用于实现继承和共享属性的有限对象链。</p>
</blockquote>
<p>任何对象都可以作为另一个对象的原型，而原型本身可以有自己的原型。如果一个原型还有原型，以此类推，它被称为原型链。</p>
<img src="/2023/js-object2.png" width="80%" style="margin: 1% 10% 1% 10%;"/>
<p>规则很简单：如果在对象本身中找不到某个属性，则尝试在原型中找、在原型的原型中找，以此类推直到找遍整个原型链，如果最终在原型链中找不到属性，则返回 undefined。从技术上讲，这种机制称为动态调度或委托。</p>
<blockquote>
<p>委托：一种用于解析继承链中的属性的机制。该过程发生在运行时，因此也称为<strong>动态调度。</strong></p>
</blockquote>
<p>💡 与在编译时解析引用时的静态分派相比，动态分派在运行时解析引用。</p>
<p>对象字面量实际上永远不会为空，即它总是将 Object.prototype 作为其默认原型，并继承其属性。若要创建无原型的对象，必须将其原型显式设置为 null：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">// Doesn&#39;t inherit from anything.</span></span>
<span class="line"><span style="color: #C792EA">let</span><span style="color: #BABED8"> dict </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> Object</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">create</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">null</span><span style="color: #BABED8">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #BABED8">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #BABED8">(dict</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">toString) </span><span style="color: #676E95; font-style: italic">// undefined</span></span></code></pre>
</div><p>动态分派机制允许继承链的灵活可变性，提供更改委托对象的能力：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">let</span><span style="color: #BABED8"> protoA </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">{</span><span style="color: #BABED8"> </span><span style="color: #F07178">x</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">10</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #C792EA">let</span><span style="color: #BABED8"> protoB </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">{</span><span style="color: #BABED8"> </span><span style="color: #F07178">x</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">20</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #676E95; font-style: italic">// Same as `let objectC = {__proto__: protoA};`:</span></span>
<span class="line"><span style="color: #C792EA">let</span><span style="color: #BABED8"> objectC </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> Object</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">create</span><span style="color: #BABED8">(protoA)</span></span>
<span class="line"><span style="color: #BABED8">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #BABED8">(objectC</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">x) </span><span style="color: #676E95; font-style: italic">// 10</span></span>
<span class="line"></span>
<span class="line"><span style="color: #676E95; font-style: italic">// Change the delegate:</span></span>
<span class="line"><span style="color: #BABED8">Object</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">setPrototypeOf</span><span style="color: #BABED8">(objectC</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> protoB)</span></span>
<span class="line"><span style="color: #BABED8">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #BABED8">(objectC</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">x) </span><span style="color: #676E95; font-style: italic">// 20</span></span></code></pre>
</div><div class="info custom-block"><p class="custom-block-title">INFO</p>
<p>尽管 <strong>proto</strong> 属性在今天已经标准化，并且更容易解释，但在实践中更喜欢使用 API 方法进行原型操作，如 Object.create、Object.getPrototypeOf、 Object.setPrototypeOf、通过 Reflect 模块操作对象。</p>
</div>
<p>很多面向对象语言都是基于类的概念实现继承。ECMAScript 2015 中也实现了这种基于类（class）的抽象继承方式，我们来看看其隐藏的实现的细节。</p>
<h2 id="_3-class" tabindex="-1">3. Class <a class="header-anchor" href="#_3-class" aria-label="Permalink to &quot;3. Class&quot;">&ZeroWidthSpace;</a></h2>
<blockquote>
<p>Class：类是一个正式的抽象集，它指定其对象的初始状态和行为。</p>
</blockquote>
<p>当几个对象共享相同的初始状态和行为时，它们就形成了一个分类。如果我们需要从同一个原型继承多个对象，可以创建这个原型，并从新创建的对象中显式继承它：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">// Generic prototype for all letters.</span></span>
<span class="line"><span style="color: #C792EA">let</span><span style="color: #BABED8"> letter </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #BABED8">  </span><span style="color: #F07178">getNumber</span><span style="color: #89DDFF">()</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">this.</span><span style="color: #BABED8">number</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">},</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">let</span><span style="color: #BABED8"> a </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">{</span><span style="color: #BABED8"> </span><span style="color: #F07178">number</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #F07178">__proto__</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> letter </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #C792EA">let</span><span style="color: #BABED8"> b </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">{</span><span style="color: #BABED8"> </span><span style="color: #F07178">number</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">2</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #F07178">__proto__</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> letter </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #C792EA">let</span><span style="color: #BABED8"> z </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">{</span><span style="color: #BABED8"> </span><span style="color: #F07178">number</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">26</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #F07178">__proto__</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> letter </span><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #BABED8">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #BABED8">(</span></span>
<span class="line"><span style="color: #BABED8">  a</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getNumber</span><span style="color: #BABED8">()</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic">// 1</span></span>
<span class="line"><span style="color: #BABED8">  b</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getNumber</span><span style="color: #BABED8">()</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic">// 2</span></span>
<span class="line"><span style="color: #BABED8">  z</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getNumber</span><span style="color: #BABED8">() </span><span style="color: #676E95; font-style: italic">// 26</span></span>
<span class="line"><span style="color: #BABED8">)</span></span></code></pre>
</div><img src="/2023/js-object3.png" width="80%" style="margin: 1% 10% 1% 10%;"/>
<p>但是，这样写显然很麻烦。而类抽象正是为了解决这个问题，作为一个语法糖（即一个在语义上做同样的事情，但语法形式更好的结构），它允许使用一种更便捷的方式创建这样的多个对象：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">Letter</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #BABED8">  </span><span style="color: #C792EA">constructor</span><span style="color: #89DDFF">(</span><span style="color: #BABED8; font-style: italic">number</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">this.</span><span style="color: #BABED8">number</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #BABED8">number</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #BABED8">  </span><span style="color: #F07178">getNumber</span><span style="color: #89DDFF">()</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">this.</span><span style="color: #BABED8">number</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">let</span><span style="color: #BABED8"> a </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">new</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">Letter</span><span style="color: #BABED8">(</span><span style="color: #F78C6C">1</span><span style="color: #BABED8">)</span></span>
<span class="line"><span style="color: #C792EA">let</span><span style="color: #BABED8"> b </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">new</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">Letter</span><span style="color: #BABED8">(</span><span style="color: #F78C6C">2</span><span style="color: #BABED8">)</span></span>
<span class="line"><span style="color: #C792EA">let</span><span style="color: #BABED8"> z </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">new</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">Letter</span><span style="color: #BABED8">(</span><span style="color: #F78C6C">26</span><span style="color: #BABED8">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #BABED8">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #BABED8">(</span></span>
<span class="line"><span style="color: #BABED8">  a</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getNumber</span><span style="color: #BABED8">()</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic">// 1</span></span>
<span class="line"><span style="color: #BABED8">  b</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getNumber</span><span style="color: #BABED8">()</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic">// 2</span></span>
<span class="line"><span style="color: #BABED8">  z</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getNumber</span><span style="color: #BABED8">() </span><span style="color: #676E95; font-style: italic">// 26</span></span>
<span class="line"><span style="color: #BABED8">)</span></span></code></pre>
</div><p>💡 ECMAScript 中基于类的继承是在基于原型的委托实现的。“类”只是一个理论抽象。从技术上讲，它可以使用 Java 或 C++ 中的静态调度来实现，也可以使用 JavaScript、Python、Ruby 等中的动态调度（委托）来实现。</p>
<p>从技术上来看，class 其实就是“构造函数 + 原型”的组合。构造函数创建对象，并自动为其新创建的实例设置原型。</p>
<blockquote>
<p>Constructor：构造函数是用于创建实例并自动设置其原型的函数。</p>
</blockquote>
<p>可以显式使用构造函数。此外，在引入 class 语法糖之前，JS 开发人员过去没有更好的选择（仍然可以看到很多这样的遗留代码）：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">function</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">Letter</span><span style="color: #89DDFF">(</span><span style="color: #BABED8; font-style: italic">number</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">this.</span><span style="color: #BABED8">number</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #BABED8">number</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FFCB6B">Letter</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">prototype</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getNumber</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #C792EA">function</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">()</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">this.</span><span style="color: #BABED8">number</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">let</span><span style="color: #BABED8"> a </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">new</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">Letter</span><span style="color: #BABED8">(</span><span style="color: #F78C6C">1</span><span style="color: #BABED8">)</span></span>
<span class="line"><span style="color: #C792EA">let</span><span style="color: #BABED8"> b </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">new</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">Letter</span><span style="color: #BABED8">(</span><span style="color: #F78C6C">2</span><span style="color: #BABED8">)</span></span>
<span class="line"><span style="color: #C792EA">let</span><span style="color: #BABED8"> z </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">new</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">Letter</span><span style="color: #BABED8">(</span><span style="color: #F78C6C">26</span><span style="color: #BABED8">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #BABED8">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #BABED8">(</span></span>
<span class="line"><span style="color: #BABED8">  a</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getNumber</span><span style="color: #BABED8">()</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic">// 1</span></span>
<span class="line"><span style="color: #BABED8">  b</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getNumber</span><span style="color: #BABED8">()</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic">// 2</span></span>
<span class="line"><span style="color: #BABED8">  z</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getNumber</span><span style="color: #BABED8">() </span><span style="color: #676E95; font-style: italic">// 26</span></span>
<span class="line"><span style="color: #BABED8">)</span></span></code></pre>
</div><p>虽然这样单级的继承使用构造函数非常简单，但如果父类很多代码就很容易变得杂乱。class 语法糖正是隐藏了这些细节。</p>
<p>我们来看看上面构造函数例子中的完整关系图：</p>
<img src="/2023/js-object4.png" width="80%" style="margin: 1% 10% 1% 10%;"/>
<p>上图显示每个对象都有一个原型。甚至构造函数（类）Letter 都有自己的原型，即 Function.prototype。构造函数的 prototype 属性只是对将要构造实例的原型的引用。其次构造函数也是对象（函数对象），其<code>__proto__</code> 属性指向 Object.prototype ，再补充一张简化继承关系图：</p>
<img src="/2023/js-object5.png" width="80%" style="margin: 1% 10% 1% 10%;"/>
<h2 id="参考文档" tabindex="-1">参考文档 <a class="header-anchor" href="#参考文档" aria-label="Permalink to &quot;参考文档&quot;">&ZeroWidthSpace;</a></h2>
<ul>
<li>
<p><a href="http://dmitrysoshnikov.com/ecmascript/javascript-the-core-2nd-edition/#execution-context" target="_blank" rel="noreferrer">JavaScript. The Core: 2nd Edition</a></p>
</li>
<li>
<p><a href="https://coolshell.cn/articles/6668.html" target="_blank" rel="noreferrer">再谈 javascript 面向对象编程 | 酷 壳 - CoolShell</a></p>
</li>
<li>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain" target="_blank" rel="noreferrer">继承与原型链 - JavaScript | MDN</a></p>
</li>
</ul>
]]></content:encoded>
        </item>
    </channel>
</rss>